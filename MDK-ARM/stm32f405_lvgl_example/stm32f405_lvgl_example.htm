<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [stm32f405_lvgl_example\stm32f405_lvgl_example.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image stm32f405_lvgl_example\stm32f405_lvgl_example.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6140002: Last Updated: Wed Oct  6 03:18:32 2021
<BR><P>
<H3>Maximum Stack Usage =       1660 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
lv_arc_event &rArr; lv_draw_arc &rArr; lv_draw_rect &rArr; lv_draw_img &rArr; show_error &rArr;  lv_draw_rect (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[101]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[137]">_lv_area_is_point_on</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[137]">_lv_area_is_point_on</a><BR>
 <LI><a href="#[78]">lv_obj_get_style_prop</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">lv_obj_get_style_prop</a><BR>
 <LI><a href="#[1cb]">event_send_core</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1cb]">event_send_core</a><BR>
 <LI><a href="#[302]">refresh_children_style</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[302]">refresh_children_style</a><BR>
 <LI><a href="#[305]">report_style_change_core</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[305]">report_style_change_core</a><BR>
 <LI><a href="#[18a]">apply_theme</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18a]">apply_theme</a><BR>
 <LI><a href="#[2b8]">lv_obj_is_group_def</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b8]">lv_obj_is_group_def</a><BR>
 <LI><a href="#[2b6]">lv_obj_construct</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b6]">lv_obj_construct</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[1a8]">lv_obj_move_children_by</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a8]">lv_obj_move_children_by</a><BR>
 <LI><a href="#[20d]">layout_update_core</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20d]">layout_update_core</a><BR>
 <LI><a href="#[25d]">show_error</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[222]">lv_draw_rect</a><BR>
 <LI><a href="#[1c7]">lv_draw_label</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[222]">lv_draw_rect</a><BR>
 <LI><a href="#[1c4]">lv_draw_line</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[222]">lv_draw_rect</a><BR>
 <LI><a href="#[65]">lv_memcpy_small</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[65]">lv_memcpy_small</a><BR>
 <LI><a href="#[31a]">lv_refr_obj</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[31a]">lv_refr_obj</a><BR>
 <LI><a href="#[319]">lv_refr_get_top_obj</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[319]">lv_refr_get_top_obj</a><BR>
 <LI><a href="#[60]">lvgl_task</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[60]">lvgl_task</a><BR>
 <LI><a href="#[5f]">lvgl_tick_task</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5f]">lvgl_tick_task</a><BR>
 <LI><a href="#[2c2]">lv_obj_is_editable</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c2]">lv_obj_is_editable</a><BR>
 <LI><a href="#[181]">lv_memcpy_small</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[181]">lv_memcpy_small</a><BR>
 <LI><a href="#[349]">lv_textarea_add_char</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[201]">insert_handler</a><BR>
 <LI><a href="#[203]">lv_textarea_add_text</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[201]">insert_handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f4xx_it.o(.text.BusFault_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[1e]">CAN1_RX0_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[1d]">CAN1_TX_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[48]">CAN2_RX0_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[49]">CAN2_RX1_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[4a]">CAN2_SCE_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[47]">CAN2_TX_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[15]">DMA1_Stream0_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream1_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream2_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream3_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream4_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream5_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream6_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[39]">DMA1_Stream7_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[42]">DMA2_Stream0_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream1_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream2_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream3_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream4_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[4c]">DMA2_Stream5_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[4d]">DMA2_Stream6_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream7_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f4xx_it.o(.text.DebugMon_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[3a]">FMC_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[57]">FPU_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[5c]">HAL_GPIO_Init</a> from stm32f4xx_hal_gpio.o(.text.HAL_GPIO_Init) referenced from gpio.o(.text.MX_GPIO_Init)
 <LI><a href="#[5b]">HAL_GPIO_WritePin</a> from stm32f4xx_hal_gpio.o(.text.HAL_GPIO_WritePin) referenced from gpio.o(.text.MX_GPIO_Init)
 <LI><a href="#[56]">HASH_RNG_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f4xx_it.o(.text.HardFault_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[51]">I2C3_ER_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[50]">I2C3_EV_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f4xx_it.o(.text.MemManage_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f4xx_it.o(.text.NMI_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[4b]">OTG_FS_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[34]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[53]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[52]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[55]">OTG_HS_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[54]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from port.o(.text.PendSV_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[5d]">ST7735_ExecuteCommandList</a> from st7735.o(.text.ST7735_ExecuteCommandList) referenced from st7735.o(.text.ST7735_Init)
 <LI><a href="#[5e]">ST7735_WriteCommand</a> from st7735.o(.text.ST7735_WriteCommand) referenced from st7735.o(.text.ST7735_SetAddressWindow)
 <LI><a href="#[6]">SVC_Handler</a> from port.o(.text.SVC_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[5a]">StartDefaultTask</a> from freertos.o(.text.StartDefaultTask) referenced from freertos.o(.text.MX_FREERTOS_Init)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f4xx_it.o(.text.SysTick_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[58]">SystemInit</a> from system_stm32f4xx.o(.text.SystemInit) referenced from startup_stm32f405xx.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[40]">TIM6_DAC_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[36]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[4f]">USART6_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f4xx_it.o(.text.UsageFault_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[59]">__main</a> from __main.o(!!!main) referenced from startup_stm32f405xx.o(.text)
 <LI><a href="#[81]">_lv_disp_refr_timer</a> from lv_refr.o(.text._lv_disp_refr_timer) referenced from lv_hal_disp.o(.text.lv_disp_drv_register)
 <LI><a href="#[8e]">_lv_ll_get_head</a> from lv_ll.o(.text._lv_ll_get_head) referenced from lv_group.o(.text.lv_group_focus_next)
 <LI><a href="#[8f]">_lv_ll_get_next</a> from lv_ll.o(.text._lv_ll_get_next) referenced from lv_group.o(.text.lv_group_focus_next)
 <LI><a href="#[91]">_lv_ll_get_prev</a> from lv_ll.o(.text._lv_ll_get_prev) referenced from lv_group.o(.text.lv_group_focus_prev)
 <LI><a href="#[90]">_lv_ll_get_tail</a> from lv_ll.o(.text._lv_ll_get_tail) referenced from lv_group.o(.text.lv_group_focus_prev)
 <LI><a href="#[71]">_out_buffer</a> from lv_printf.o(.text._out_buffer) referenced from lv_printf.o(.text._vsnprintf)
 <LI><a href="#[70]">_out_null</a> from lv_printf.o(.text._out_null) referenced from lv_printf.o(.text._vsnprintf)
 <LI><a href="#[61]">anim_timer</a> from lv_anim.o(.text.anim_timer) referenced from lv_anim.o(.text._lv_anim_core_init)
 <LI><a href="#[9c]">btns_value_changed_event_cb</a> from lv_tabview.o(.text.btns_value_changed_event_cb) referenced from lv_tabview.o(.text.lv_tabview_constructor)
 <LI><a href="#[62]">color_blend_true_color_additive</a> from lv_draw_blend.o(.text.color_blend_true_color_additive) referenced from lv_draw_blend.o(.text._lv_blend_map)
 <LI><a href="#[63]">color_blend_true_color_subtractive</a> from lv_draw_blend.o(.text.color_blend_true_color_subtractive) referenced from lv_draw_blend.o(.text._lv_blend_map)
 <LI><a href="#[9d]">cont_scroll_end_event_cb</a> from lv_tabview.o(.text.cont_scroll_end_event_cb) referenced from lv_tabview.o(.text.lv_tabview_constructor)
 <LI><a href="#[a5]">cursor_blink_anim_cb</a> from lv_textarea.o(.text.cursor_blink_anim_cb) referenced from lv_textarea.o(.text.start_cursor_blink)
 <LI><a href="#[a9]">dark_color_filter_cb</a> from lv_theme_default.o(.text.dark_color_filter_cb) referenced from lv_theme_default.o(.text.style_init)
 <LI><a href="#[a2]">default_walker</a> from lv_tlsf.o(.text.default_walker) referenced from lv_tlsf.o(.text.lv_tlsf_walk_pool)
 <LI><a href="#[99]">disp_flush</a> from lv_port_disp_template.o(.text.disp_flush) referenced from lv_port_disp_template.o(.text.lv_port_disp_init)
 <LI><a href="#[89]">flex_update</a> from lv_flex.o(.text.flex_update) referenced from lv_flex.o(.text.lv_flex_init)
 <LI><a href="#[aa]">grey_filter_cb</a> from lv_theme_default.o(.text.grey_filter_cb) referenced from lv_theme_default.o(.text.style_init)
 <LI><a href="#[8c]">grid_update</a> from lv_grid.o(.text.grid_update) referenced from lv_grid.o(.text.lv_grid_init)
 <LI><a href="#[84]">hex_char_to_num</a> from lv_draw_label.o(.text.hex_char_to_num) referenced from lv_draw_label.o(.text.lv_draw_label)
 <LI><a href="#[8a]">kern_pair_16_compare</a> from lv_font_fmt_txt.o(.text.kern_pair_16_compare) referenced from lv_font_fmt_txt.o(.text.lv_font_get_glyph_dsc_fmt_txt)
 <LI><a href="#[8b]">kern_pair_8_compare</a> from lv_font_fmt_txt.o(.text.kern_pair_8_compare) referenced from lv_font_fmt_txt.o(.text.lv_font_get_glyph_dsc_fmt_txt)
 <LI><a href="#[98]">lv_anim_path_ease_out</a> from lv_anim.o(.text.lv_anim_path_ease_out) referenced from lv_obj_scroll.o(.text.lv_obj_scroll_by)
 <LI><a href="#[7b]">lv_anim_path_linear</a> from lv_anim.o(.text.lv_anim_path_linear) referenced from lv_anim.o(.text.lv_anim_init)
 <LI><a href="#[7b]">lv_anim_path_linear</a> from lv_anim.o(.text.lv_anim_path_linear) referenced from lv_style.o(.text.lv_style_transition_dsc_init)
 <LI><a href="#[7b]">lv_anim_path_linear</a> from lv_anim.o(.text.lv_anim_path_linear) referenced from lv_theme_default.o(.text.style_init)
 <LI><a href="#[9f]">lv_anim_path_step</a> from lv_anim.o(.text.lv_anim_path_step) referenced from lv_textarea.o(.text.lv_textarea_add_text)
 <LI><a href="#[9f]">lv_anim_path_step</a> from lv_anim.o(.text.lv_anim_path_step) referenced from lv_textarea.o(.text.start_cursor_blink)
 <LI><a href="#[b8]">lv_arc_constructor</a> from lv_arc.o(.text.lv_arc_constructor) referenced from lv_arc.o(.rodata.lv_arc_class)
 <LI><a href="#[b9]">lv_arc_event</a> from lv_arc.o(.text.lv_arc_event) referenced from lv_arc.o(.rodata.lv_arc_class)
 <LI><a href="#[75]">lv_area_get_height</a> from lv_flex.o(.text.lv_area_get_height) referenced from lv_flex.o(.text.children_repos)
 <LI><a href="#[7d]">lv_area_get_height</a> from lv_bar.o(.text.lv_area_get_height) referenced from lv_bar.o(.text.lv_bar_event)
 <LI><a href="#[64]">lv_area_get_size</a> from lv_area.o(.text.lv_area_get_size) referenced from lv_refr.o(.text._lv_disp_refr_timer)
 <LI><a href="#[74]">lv_area_get_width</a> from lv_flex.o(.text.lv_area_get_width) referenced from lv_flex.o(.text.children_repos)
 <LI><a href="#[7c]">lv_area_get_width</a> from lv_bar.o(.text.lv_area_get_width) referenced from lv_bar.o(.text.lv_bar_event)
 <LI><a href="#[73]">lv_area_set_height</a> from lv_area.o(.text.lv_area_set_height) referenced from lv_flex.o(.text.children_repos)
 <LI><a href="#[72]">lv_area_set_width</a> from lv_area.o(.text.lv_area_set_width) referenced from lv_flex.o(.text.children_repos)
 <LI><a href="#[7e]">lv_bar_anim</a> from lv_bar.o(.text.lv_bar_anim) referenced from lv_bar.o(.text.lv_bar_set_value_with_anim)
 <LI><a href="#[7f]">lv_bar_anim_ready</a> from lv_bar.o(.text.lv_bar_anim_ready) referenced from lv_bar.o(.text.lv_bar_set_value_with_anim)
 <LI><a href="#[ba]">lv_bar_constructor</a> from lv_bar.o(.text.lv_bar_constructor) referenced from lv_bar.o(.rodata.lv_bar_class)
 <LI><a href="#[bb]">lv_bar_destructor</a> from lv_bar.o(.text.lv_bar_destructor) referenced from lv_bar.o(.rodata.lv_bar_class)
 <LI><a href="#[bc]">lv_bar_event</a> from lv_bar.o(.text.lv_bar_event) referenced from lv_bar.o(.rodata.lv_bar_class)
 <LI><a href="#[bd]">lv_btn_constructor</a> from lv_btn.o(.text.lv_btn_constructor) referenced from lv_btn.o(.rodata.lv_btn_class)
 <LI><a href="#[be]">lv_btnmatrix_constructor</a> from lv_btnmatrix.o(.text.lv_btnmatrix_constructor) referenced from lv_btnmatrix.o(.rodata.lv_btnmatrix_class)
 <LI><a href="#[bf]">lv_btnmatrix_destructor</a> from lv_btnmatrix.o(.text.lv_btnmatrix_destructor) referenced from lv_btnmatrix.o(.rodata.lv_btnmatrix_class)
 <LI><a href="#[c0]">lv_btnmatrix_event</a> from lv_btnmatrix.o(.text.lv_btnmatrix_event) referenced from lv_btnmatrix.o(.rodata.lv_btnmatrix_class)
 <LI><a href="#[c1]">lv_chart_constructor</a> from lv_chart.o(.text.lv_chart_constructor) referenced from lv_chart.o(.rodata.lv_chart_class)
 <LI><a href="#[c2]">lv_chart_destructor</a> from lv_chart.o(.text.lv_chart_destructor) referenced from lv_chart.o(.rodata.lv_chart_class)
 <LI><a href="#[c3]">lv_chart_event</a> from lv_chart.o(.text.lv_chart_event) referenced from lv_chart.o(.rodata.lv_chart_class)
 <LI><a href="#[c4]">lv_checkbox_constructor</a> from lv_checkbox.o(.text.lv_checkbox_constructor) referenced from lv_checkbox.o(.rodata.lv_checkbox_class)
 <LI><a href="#[c5]">lv_checkbox_destructor</a> from lv_checkbox.o(.text.lv_checkbox_destructor) referenced from lv_checkbox.o(.rodata.lv_checkbox_class)
 <LI><a href="#[c6]">lv_checkbox_event</a> from lv_checkbox.o(.text.lv_checkbox_event) referenced from lv_checkbox.o(.rodata.lv_checkbox_class)
 <LI><a href="#[a7]">lv_disp_dpx</a> from lv_theme_default.o(.text.lv_disp_dpx) referenced from lv_theme_default.o(.text.style_init)
 <LI><a href="#[86]">lv_draw_mask_angle</a> from lv_draw_mask.o(.text.lv_draw_mask_angle) referenced from lv_draw_mask.o(.text.lv_draw_mask_angle_init)
 <LI><a href="#[83]">lv_draw_mask_free_param</a> from lv_draw_mask.o(.text.lv_draw_mask_free_param) referenced from lv_draw_arc.o(.text.lv_draw_arc)
 <LI><a href="#[87]">lv_draw_mask_line</a> from lv_draw_mask.o(.text.lv_draw_mask_line) referenced from lv_draw_mask.o(.text.lv_draw_mask_line_points_init)
 <LI><a href="#[88]">lv_draw_mask_radius</a> from lv_draw_mask.o(.text.lv_draw_mask_radius) referenced from lv_draw_mask.o(.text.lv_draw_mask_radius_init)
 <LI><a href="#[85]">lv_draw_mask_remove_id</a> from lv_draw_mask.o(.text.lv_draw_mask_remove_id) referenced from lv_draw_line.o(.text.lv_draw_line)
 <LI><a href="#[9b]">lv_event_send</a> from lv_event.o(.text.lv_event_send) referenced from lv_refr.o(.text.lv_refr_obj_and_children)
 <LI><a href="#[c8]">lv_font_get_bitmap_fmt_txt</a> from lv_font_fmt_txt.o(.text.lv_font_get_bitmap_fmt_txt) referenced from lv_font_montserrat_14.o(.rodata.lv_font_montserrat_14)
 <LI><a href="#[c7]">lv_font_get_glyph_dsc_fmt_txt</a> from lv_font_fmt_txt.o(.text.lv_font_get_glyph_dsc_fmt_txt) referenced from lv_font_montserrat_14.o(.rodata.lv_font_montserrat_14)
 <LI><a href="#[67]">lv_img_buf_get_px_alpha</a> from lv_img_buf.o(.text.lv_img_buf_get_px_alpha) referenced from lv_img_buf.o(.text._lv_img_buf_transform_anti_alias)
 <LI><a href="#[66]">lv_img_buf_get_px_color</a> from lv_img_buf.o(.text.lv_img_buf_get_px_color) referenced from lv_img_buf.o(.text._lv_img_buf_transform_anti_alias)
 <LI><a href="#[69]">lv_img_decoder_built_in_close</a> from lv_img_decoder.o(.text.lv_img_decoder_built_in_close) referenced from lv_img_decoder.o(.text._lv_img_decoder_init)
 <LI><a href="#[6c]">lv_img_decoder_built_in_info</a> from lv_img_decoder.o(.text.lv_img_decoder_built_in_info) referenced from lv_img_decoder.o(.text._lv_img_decoder_init)
 <LI><a href="#[6b]">lv_img_decoder_built_in_open</a> from lv_img_decoder.o(.text.lv_img_decoder_built_in_open) referenced from lv_img_decoder.o(.text._lv_img_decoder_init)
 <LI><a href="#[6a]">lv_img_decoder_built_in_read_line</a> from lv_img_decoder.o(.text.lv_img_decoder_built_in_read_line) referenced from lv_img_decoder.o(.text._lv_img_decoder_init)
 <LI><a href="#[c9]">lv_label_constructor</a> from lv_label.o(.text.lv_label_constructor) referenced from lv_label.o(.rodata.lv_label_class)
 <LI><a href="#[ca]">lv_label_destructor</a> from lv_label.o(.text.lv_label_destructor) referenced from lv_label.o(.rodata.lv_label_class)
 <LI><a href="#[cb]">lv_label_event</a> from lv_label.o(.text.lv_label_event) referenced from lv_label.o(.rodata.lv_label_class)
 <LI><a href="#[cc]">lv_line_constructor</a> from lv_line.o(.text.lv_line_constructor) referenced from lv_line.o(.rodata.lv_line_class)
 <LI><a href="#[cd]">lv_line_event</a> from lv_line.o(.text.lv_line_event) referenced from lv_line.o(.rodata.lv_line_class)
 <LI><a href="#[7a]">lv_mem_buf_release</a> from lv_mem.o(.text.lv_mem_buf_release) referenced from lv_grid.o(.text.grid_update)
 <LI><a href="#[94]">lv_mem_walker</a> from lv_mem.o(.text.lv_mem_walker) referenced from lv_mem.o(.text.lv_mem_monitor)
 <LI><a href="#[65]">lv_memcpy_small</a> from lv_img_buf.o(.text.lv_memcpy_small) referenced from lv_img_buf.o(.text._lv_img_buf_transform_anti_alias)
 <LI><a href="#[80]">lv_obj_add_flag</a> from lv_obj.o(.text.lv_obj_add_flag) referenced from lv_checkbox.o(.text.lv_checkbox_constructor)
 <LI><a href="#[b5]">lv_obj_add_style</a> from lv_obj_style.o(.text.lv_obj_add_style) referenced from lv_theme_default.o(.text.theme_apply)
 <LI><a href="#[ce]">lv_obj_constructor</a> from lv_obj.o(.text.lv_obj_constructor) referenced from lv_obj.o(.rodata.lv_obj_class)
 <LI><a href="#[82]">lv_obj_create</a> from lv_obj.o(.text.lv_obj_create) referenced from lv_hal_disp.o(.text.lv_disp_drv_register)
 <LI><a href="#[cf]">lv_obj_destructor</a> from lv_obj.o(.text.lv_obj_destructor) referenced from lv_obj.o(.rodata.lv_obj_class)
 <LI><a href="#[d0]">lv_obj_event</a> from lv_obj.o(.text.lv_obj_event) referenced from lv_obj.o(.rodata.lv_obj_class)
 <LI><a href="#[77]">lv_obj_get_height</a> from lv_obj_pos.o(.text.lv_obj_get_height) referenced from lv_flex.o(.text.find_track_end)
 <LI><a href="#[78]">lv_obj_get_style_prop</a> from lv_obj_style.o(.text.lv_obj_get_style_prop) referenced from lv_flex.o(.text.flex_update)
 <LI><a href="#[78]">lv_obj_get_style_prop</a> from lv_obj_style.o(.text.lv_obj_get_style_prop) referenced from lv_grid.o(.text.grid_update)
 <LI><a href="#[78]">lv_obj_get_style_prop</a> from lv_obj_style.o(.text.lv_obj_get_style_prop) referenced from lv_checkbox.o(.text.lv_checkbox_event)
 <LI><a href="#[78]">lv_obj_get_style_prop</a> from lv_obj_style.o(.text.lv_obj_get_style_prop) referenced from lv_obj_draw.o(.text.lv_obj_init_draw_rect_dsc)
 <LI><a href="#[76]">lv_obj_get_width</a> from lv_obj_pos.o(.text.lv_obj_get_width) referenced from lv_flex.o(.text.find_track_end)
 <LI><a href="#[9a]">lv_refr_obj_and_children</a> from lv_refr.o(.text.lv_refr_obj_and_children) referenced from lv_refr.o(.text.lv_refr_area_part)
 <LI><a href="#[d1]">lv_slider_constructor</a> from lv_slider.o(.text.lv_slider_constructor) referenced from lv_slider.o(.rodata.lv_slider_class)
 <LI><a href="#[d2]">lv_slider_event</a> from lv_slider.o(.text.lv_slider_event) referenced from lv_slider.o(.rodata.lv_slider_class)
 <LI><a href="#[8d]">lv_style_register_prop</a> from lv_style.o(.text.lv_style_register_prop) referenced from lv_grid.o(.text.lv_grid_init)
 <LI><a href="#[b0]">lv_style_set_anim_time</a> from lv_style_gen.o(.text.lv_style_set_anim_time) referenced from lv_theme_default.o(.text.style_init)
 <LI><a href="#[ac]">lv_style_set_bg_color</a> from lv_style_gen.o(.text.lv_style_set_bg_color) referenced from lv_theme_default.o(.text.style_init)
 <LI><a href="#[a8]">lv_style_set_bg_opa</a> from lv_style_gen.o(.text.lv_style_set_bg_opa) referenced from lv_theme_default.o(.text.style_init)
 <LI><a href="#[b2]">lv_style_set_border_color</a> from lv_style_gen.o(.text.lv_style_set_border_color) referenced from lv_theme_default.o(.text.style_init)
 <LI><a href="#[b1]">lv_style_set_border_width</a> from lv_style_gen.o(.text.lv_style_set_border_width) referenced from lv_theme_default.o(.text.style_init)
 <LI><a href="#[b4]">lv_style_set_line_color</a> from lv_style_gen.o(.text.lv_style_set_line_color) referenced from lv_theme_default.o(.text.style_init)
 <LI><a href="#[b3]">lv_style_set_line_width</a> from lv_style_gen.o(.text.lv_style_set_line_width) referenced from lv_theme_default.o(.text.style_init)
 <LI><a href="#[af]">lv_style_set_pad_all</a> from lv_theme_default.o(.text.lv_style_set_pad_all) referenced from lv_theme_default.o(.text.style_init)
 <LI><a href="#[ab]">lv_style_set_pad_column</a> from lv_style_gen.o(.text.lv_style_set_pad_column) referenced from lv_theme_default.o(.text.style_init)
 <LI><a href="#[ae]">lv_style_set_radius</a> from lv_style_gen.o(.text.lv_style_set_radius) referenced from lv_theme_default.o(.text.style_init)
 <LI><a href="#[ad]">lv_style_set_text_color</a> from lv_style_gen.o(.text.lv_style_set_text_color) referenced from lv_theme_default.o(.text.style_init)
 <LI><a href="#[d3]">lv_table_constructor</a> from lv_table.o(.text.lv_table_constructor) referenced from lv_table.o(.rodata.lv_table_class)
 <LI><a href="#[d4]">lv_table_destructor</a> from lv_table.o(.text.lv_table_destructor) referenced from lv_table.o(.rodata.lv_table_class)
 <LI><a href="#[d5]">lv_table_event</a> from lv_table.o(.text.lv_table_event) referenced from lv_table.o(.rodata.lv_table_class)
 <LI><a href="#[d6]">lv_tabview_constructor</a> from lv_tabview.o(.text.lv_tabview_constructor) referenced from lv_tabview.o(.rodata.lv_tabview_class)
 <LI><a href="#[d7]">lv_tabview_destructor</a> from lv_tabview.o(.text.lv_tabview_destructor) referenced from lv_tabview.o(.rodata.lv_tabview_class)
 <LI><a href="#[d8]">lv_tabview_event</a> from lv_tabview.o(.text.lv_tabview_event) referenced from lv_tabview.o(.rodata.lv_tabview_class)
 <LI><a href="#[d9]">lv_textarea_constructor</a> from lv_textarea.o(.text.lv_textarea_constructor) referenced from lv_textarea.o(.rodata.lv_textarea_class)
 <LI><a href="#[da]">lv_textarea_destructor</a> from lv_textarea.o(.text.lv_textarea_destructor) referenced from lv_textarea.o(.rodata.lv_textarea_class)
 <LI><a href="#[db]">lv_textarea_event</a> from lv_textarea.o(.text.lv_textarea_event) referenced from lv_textarea.o(.rodata.lv_textarea_class)
 <LI><a href="#[68]">lv_trigo_sin</a> from lv_math.o(.text.lv_trigo_sin) referenced from lv_img_buf.o(.text._lv_img_buf_transform_init)
 <LI><a href="#[68]">lv_trigo_sin</a> from lv_math.o(.text.lv_trigo_sin) referenced from lv_draw_arc.o(.text.lv_draw_arc_get_area)
 <LI><a href="#[e2]">lv_txt_unicode_to_utf8</a> from lv_txt.o(.text.lv_txt_unicode_to_utf8) referenced from lv_txt.o(.data._lv_txt_unicode_to_encoded)
 <LI><a href="#[e0]">lv_txt_utf8_get_byte_id</a> from lv_txt.o(.text.lv_txt_utf8_get_byte_id) referenced from lv_txt.o(.data._lv_txt_encoded_get_byte_id)
 <LI><a href="#[dc]">lv_txt_utf8_get_char_id</a> from lv_txt.o(.text.lv_txt_utf8_get_char_id) referenced from lv_txt.o(.data._lv_txt_encoded_get_char_id)
 <LI><a href="#[e1]">lv_txt_utf8_get_length</a> from lv_txt.o(.text.lv_txt_utf8_get_length) referenced from lv_txt.o(.data._lv_txt_get_encoded_length)
 <LI><a href="#[df]">lv_txt_utf8_next</a> from lv_txt.o(.text.lv_txt_utf8_next) referenced from lv_txt.o(.data..L_MergedGlobals)
 <LI><a href="#[dd]">lv_txt_utf8_prev</a> from lv_txt.o(.text.lv_txt_utf8_prev) referenced from lv_txt.o(.data._lv_txt_encoded_prev)
 <LI><a href="#[de]">lv_txt_utf8_size</a> from lv_txt.o(.text.lv_txt_utf8_size) referenced from lv_txt.o(.data..L_MergedGlobals)
 <LI><a href="#[60]">lvgl_task</a> from freertos.o(.text.lvgl_task) referenced from freertos.o(.text.StartDefaultTask)
 <LI><a href="#[5f]">lvgl_tick_task</a> from freertos.o(.text.lvgl_tick_task) referenced from freertos.o(.text.StartDefaultTask)
 <LI><a href="#[b6]">prvIdleTask</a> from tasks.o(.text.prvIdleTask) referenced from tasks.o(.text.vTaskStartScheduler)
 <LI><a href="#[a4]">prvTaskExitError</a> from port.o(.text.prvTaskExitError) referenced from port.o(.text.pxPortInitialiseStack)
 <LI><a href="#[b7]">prvTimerTask</a> from timers.o(.text.prvTimerTask) referenced from timers.o(.text.xTimerCreateTimerTask)
 <LI><a href="#[9e]">pwd_char_hider_anim</a> from lv_textarea.o(.text.pwd_char_hider_anim) referenced from lv_textarea.o(.text.lv_textarea_add_text)
 <LI><a href="#[a0]">pwd_char_hider_anim_ready</a> from lv_textarea.o(.text.pwd_char_hider_anim_ready) referenced from lv_textarea.o(.text.lv_textarea_add_text)
 <LI><a href="#[97]">scroll_anim_ready_cb</a> from lv_obj_scroll.o(.text.scroll_anim_ready_cb) referenced from lv_obj_scroll.o(.text.lv_obj_scroll_by)
 <LI><a href="#[95]">scroll_x_anim</a> from lv_obj_scroll.o(.text.scroll_x_anim) referenced from lv_obj_scroll.o(.text.lv_obj_get_scroll_end)
 <LI><a href="#[95]">scroll_x_anim</a> from lv_obj_scroll.o(.text.scroll_x_anim) referenced from lv_obj_scroll.o(.text.lv_obj_scroll_to_x)
 <LI><a href="#[95]">scroll_x_anim</a> from lv_obj_scroll.o(.text.scroll_x_anim) referenced from lv_obj_scroll.o(.text.scroll_area_into_view)
 <LI><a href="#[96]">scroll_y_anim</a> from lv_obj_scroll.o(.text.scroll_y_anim) referenced from lv_obj_scroll.o(.text.lv_obj_get_scroll_end)
 <LI><a href="#[96]">scroll_y_anim</a> from lv_obj_scroll.o(.text.scroll_y_anim) referenced from lv_obj_scroll.o(.text.lv_obj_scroll_to_y)
 <LI><a href="#[96]">scroll_y_anim</a> from lv_obj_scroll.o(.text.scroll_y_anim) referenced from lv_obj_scroll.o(.text.scroll_area_into_view)
 <LI><a href="#[92]">set_ofs_x_anim</a> from lv_label.o(.text.set_ofs_x_anim) referenced from lv_label.o(.text.lv_label_refr_text)
 <LI><a href="#[92]">set_ofs_x_anim</a> from lv_label.o(.text.set_ofs_x_anim) referenced from lv_label.o(.text.lv_label_set_long_mode)
 <LI><a href="#[93]">set_ofs_y_anim</a> from lv_label.o(.text.set_ofs_y_anim) referenced from lv_label.o(.text.lv_label_set_long_mode)
 <LI><a href="#[a6]">style_init_reset</a> from lv_theme_default.o(.text.style_init_reset) referenced from lv_theme_default.o(.text.style_init)
 <LI><a href="#[a1]">theme_apply</a> from lv_theme_default.o(.text.theme_apply) referenced from lv_theme_default.o(.text.lv_theme_default_init)
 <LI><a href="#[6f]">trans_anim_cb</a> from lv_obj_style.o(.text.trans_anim_cb) referenced from lv_obj_style.o(.text._lv_obj_style_create_transition)
 <LI><a href="#[6d]">trans_anim_ready_cb</a> from lv_obj_style.o(.text.trans_anim_ready_cb) referenced from lv_obj_style.o(.text._lv_obj_style_create_transition)
 <LI><a href="#[6e]">trans_anim_start_cb</a> from lv_obj_style.o(.text.trans_anim_start_cb) referenced from lv_obj_style.o(.text._lv_obj_style_create_transition)
 <LI><a href="#[79]">unicode_list_compare</a> from lv_font_fmt_txt.o(.text.unicode_list_compare) referenced from lv_font_fmt_txt.o(.text.get_glyph_dsc_id)
 <LI><a href="#[a3]">vListInitialise</a> from list.o(.text.vListInitialise) referenced from tasks.o(.text.prvAddNewTaskToReadyList)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[59]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(.text)
</UL>
<P><STRONG><a name="[e3]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[e5]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[3a1]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[3a2]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[e6]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[3a3]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[3a4]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))

<P><STRONG><a name="[e7]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[e9]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[3a5]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[f0]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[eb]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[3a6]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[3a7]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[3a8]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[3a9]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[3aa]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[3ab]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[3ac]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[3ad]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[3ae]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[3af]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[3b0]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[3b1]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[3b2]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[3b3]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[3b4]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[3b5]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[3b6]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[3b7]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[3b8]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[3b9]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[f5]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[3ba]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[3bb]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[3bc]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[3bd]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[3be]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[3bf]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[3c0]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[e4]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[3c1]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[ed]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[ef]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[3c2]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[f1]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; osKernelStart &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[3c3]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[102]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[f4]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[3c4]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[f6]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[101]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f405xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[10e]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_long_long
</UL>

<P><STRONG><a name="[3c5]"></a>_ll_udiv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[e8]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
</UL>

<P><STRONG><a name="[283]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
</UL>

<P><STRONG><a name="[17c]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_ext
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_ins
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_cut
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
</UL>

<P><STRONG><a name="[375]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>

<P><STRONG><a name="[f9]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[3c6]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[fa]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[3c7]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[3c8]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[3c9]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[fb]"></a>__aeabi_memset4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_ff
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[3ca]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_memset4.o(.text), UNUSED)

<P><STRONG><a name="[112]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>

<P><STRONG><a name="[3cb]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[3cc]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[fc]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>

<P><STRONG><a name="[202]"></a>strcmp</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, strcmpv7em.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_match
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_handler
</UL>

<P><STRONG><a name="[3cd]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[3ce]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[3cf]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[fd]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[ea]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[ff]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[ee]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[f3]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[3d0]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[100]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[3d1]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[3d2]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[3d3]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[3d4]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[118]"></a>Error_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.text.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
</UL>

<P><STRONG><a name="[103]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f4xx_hal.o(.text.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_ExecuteCommandList
</UL>

<P><STRONG><a name="[5c]"></a>HAL_GPIO_Init</STRONG> (Thumb, 424 bytes, Stack size 44 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.text.MX_GPIO_Init)
</UL>
<P><STRONG><a name="[12c]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>

<P><STRONG><a name="[5b]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_WriteData
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Unselect
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Select
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillRectangle
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_WriteCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.text.MX_GPIO_Init)
</UL>
<P><STRONG><a name="[104]"></a>HAL_GetTick</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>

<P><STRONG><a name="[12e]"></a>HAL_IncTick</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[105]"></a>HAL_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[107]"></a>HAL_InitTick</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f4xx_hal.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[108]"></a>HAL_MspInit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[10a]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[106]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[10c]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[10d]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[10f]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 824 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[110]"></a>HAL_SPI_Init</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(.text.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
</UL>

<P><STRONG><a name="[111]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, spi.o(.text.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[113]"></a>HAL_SPI_Transmit</STRONG> (Thumb, 360 bytes, Stack size 32 bytes, stm32f4xx_hal_spi.o(.text.HAL_SPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_WriteData
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillRectangle
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_WriteCommand
</UL>

<P><STRONG><a name="[109]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text.HAL_SYSTICK_Config))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[115]"></a>MX_FREERTOS_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, freertos.o(.text.MX_FREERTOS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = MX_FREERTOS_Init &rArr; osThreadNew &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[363]"></a>MX_GPIO_Init</STRONG> (Thumb, 256 bytes, Stack size 64 bytes, gpio.o(.text.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MX_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[117]"></a>MX_SPI2_Init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, spi.o(.text.MX_SPI2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = MX_SPI2_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, port.o(.text.PendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[11b]"></a>ST7735_DrawPixel</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, st7735.o(.text.ST7735_DrawPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ST7735_DrawPixel &rArr; ST7735_SetAddressWindow &rArr; ST7735_WriteData &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_WriteData
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Unselect
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_SetAddressWindow
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Select
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_flush
</UL>

<P><STRONG><a name="[120]"></a>ST7735_FillRectangle</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, st7735.o(.text.ST7735_FillRectangle))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ST7735_FillRectangle &rArr; ST7735_SetAddressWindow &rArr; ST7735_WriteData &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Unselect
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_SetAddressWindow
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Select
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillScreen
</UL>

<P><STRONG><a name="[121]"></a>ST7735_FillScreen</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, st7735.o(.text.ST7735_FillScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ST7735_FillScreen &rArr; ST7735_FillRectangle &rArr; ST7735_SetAddressWindow &rArr; ST7735_WriteData &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillRectangle
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_disp_init
</UL>

<P><STRONG><a name="[122]"></a>ST7735_Init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, st7735.o(.text.ST7735_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ST7735_Init &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Unselect
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Select
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_disp_init
</UL>

<P><STRONG><a name="[11c]"></a>ST7735_Select</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, st7735.o(.text.ST7735_Select))
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillRectangle
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawPixel
</UL>

<P><STRONG><a name="[11d]"></a>ST7735_SetAddressWindow</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, st7735.o(.text.ST7735_SetAddressWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ST7735_SetAddressWindow &rArr; ST7735_WriteData &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillRectangle
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawPixel
</UL>

<P><STRONG><a name="[11f]"></a>ST7735_Unselect</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, st7735.o(.text.ST7735_Unselect))
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillRectangle
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawPixel
</UL>

<P><STRONG><a name="[11e]"></a>ST7735_WriteData</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, st7735.o(.text.ST7735_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ST7735_WriteData &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_SetAddressWindow
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawPixel
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_ExecuteCommandList
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>StartDefaultTask</STRONG> (Thumb, 256 bytes, Stack size 0 bytes, freertos.o(.text.StartDefaultTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = StartDefaultTask &rArr; lv_label_set_text_fmt &rArr; lv_label_refr_text &rArr; lv_label_get_letter_on &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_disp_init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_recolor
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scr_act
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.text.MX_FREERTOS_Init)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SysTick_Handler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[131]"></a>SystemClock_Config</STRONG> (Thumb, 168 bytes, Stack size 88 bytes, main.o(.text.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[58]"></a>SystemInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, system_stm32f4xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(.text)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[132]"></a>_lv_anim_core_init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lv_anim.o(.text._lv_anim_core_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _lv_anim_core_init &rArr; lv_timer_create &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_mark_list_change
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[13d]"></a>_lv_area_intersect</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, lv_area.o(.text._lv_area_intersect))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_map
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
</UL>

<P><STRONG><a name="[136]"></a>_lv_area_is_in</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, lv_area.o(.text._lv_area_is_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_is_any
</UL>

<P><STRONG><a name="[145]"></a>_lv_area_is_on</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, lv_area.o(.text._lv_area_is_on))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[138]"></a>_lv_area_is_out</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, lv_area.o(.text._lv_area_is_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _lv_area_is_out &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_is_any
</UL>

<P><STRONG><a name="[137]"></a>_lv_area_is_point_on</STRONG> (Thumb, 278 bytes, Stack size 40 bytes, lv_area.o(.text._lv_area_is_point_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_point_within_circle
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_out
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_button_from_point
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[146]"></a>_lv_area_join</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, lv_area.o(.text._lv_area_join))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _lv_area_join
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[13a]"></a>_lv_blend_fill</STRONG> (Thumb, 1684 bytes, Stack size 136 bytes, lv_draw_blend.o(.text._lv_blend_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = _lv_blend_fill &rArr; _lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_draw_buf
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_fill
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_move
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_letter
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
</UL>

<P><STRONG><a name="[141]"></a>_lv_blend_map</STRONG> (Thumb, 1692 bytes, Stack size 144 bytes, lv_draw_blend.o(.text._lv_blend_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = _lv_blend_map &rArr; _lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_draw_buf
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
</UL>

<P><STRONG><a name="[81]"></a>_lv_disp_refr_timer</STRONG> (Thumb, 1220 bytes, Stack size 72 bytes, lv_refr.o(.text._lv_disp_refr_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 1252 + Unknown Stack Size
<LI>Call Chain = _lv_disp_refr_timer &rArr; lv_refr_area_part &rArr; lv_draw_rect &rArr; lv_draw_img &rArr; show_error &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_sys
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_color
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_align
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_top
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_right
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_left
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_bottom
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_opa
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_color
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_get_idle
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_free_all
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_draw_buf
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_font_clean_up_fmt_txt
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_draw_mask_cleanup
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_join
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_on
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_buf_flush
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_hal_disp.o(.text.lv_disp_drv_register)
</UL>
<P><STRONG><a name="[14f]"></a>_lv_draw_mask_cleanup</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lv_draw_mask.o(.text._lv_draw_mask_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _lv_draw_mask_cleanup &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[2ba]"></a>_lv_event_mark_deleted</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lv_event.o(.text._lv_event_mark_deleted))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_destructor
</UL>

<P><STRONG><a name="[14e]"></a>_lv_font_clean_up_fmt_txt</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_font_fmt_txt.o(.text._lv_font_clean_up_fmt_txt))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[15d]"></a>_lv_fs_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_fs.o(.text._lv_fs_init))
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[15e]"></a>_lv_group_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_group.o(.text._lv_group_init))
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[25b]"></a>_lv_img_buf_get_transformed_area</STRONG> (Thumb, 448 bytes, Stack size 40 bytes, lv_img_buf.o(.text._lv_img_buf_get_transformed_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _lv_img_buf_get_transformed_area
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
</UL>

<P><STRONG><a name="[15f]"></a>_lv_img_buf_transform</STRONG> (Thumb, 330 bytes, Stack size 40 bytes, lv_img_buf.o(.text._lv_img_buf_transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _lv_img_buf_transform &rArr; _lv_img_buf_transform_anti_alias &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_buf_get_px_color
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_buf_get_px_alpha
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform_anti_alias
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy_small
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
</UL>

<P><STRONG><a name="[160]"></a>_lv_img_buf_transform_anti_alias</STRONG> (Thumb, 704 bytes, Stack size 64 bytes, lv_img_buf.o(.text._lv_img_buf_transform_anti_alias))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _lv_img_buf_transform_anti_alias &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform
</UL>

<P><STRONG><a name="[162]"></a>_lv_img_buf_transform_init</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, lv_img_buf.o(.text._lv_img_buf_transform_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _lv_img_buf_transform_init
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_is_chroma_keyed
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_has_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
</UL>

<P><STRONG><a name="[165]"></a>_lv_img_cache_open</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, lv_img_cache.o(.text._lv_img_cache_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _lv_img_cache_open &rArr; lv_img_decoder_open &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_close
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_match
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
</UL>

<P><STRONG><a name="[169]"></a>_lv_img_decoder_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lv_img_decoder.o(.text._lv_img_decoder_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _lv_img_decoder_init &rArr; lv_img_decoder_create &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_create
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[16b]"></a>_lv_inv_area</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, lv_refr.o(.text._lv_inv_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_resume
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
</UL>

<P><STRONG><a name="[16d]"></a>_lv_ll_clear</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lv_ll.o(.text._lv_ll_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _lv_ll_clear &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_destructor
</UL>

<P><STRONG><a name="[8e]"></a>_lv_ll_get_head</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_ll.o(.text._lv_ll_get_head))
<BR><BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_handler
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_next
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_get
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_destructor
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_timer
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_mark_list_change
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_drv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_group.o(.text.lv_group_focus_next)
</UL>
<P><STRONG><a name="[23d]"></a>_lv_ll_get_len</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lv_ll.o(.text._lv_ll_get_len))
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_get_point_pos_by_id
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
</UL>

<P><STRONG><a name="[8f]"></a>_lv_ll_get_next</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_ll.o(.text._lv_ll_get_next))
<BR><BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_handler
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_next
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_get
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_timer
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_drv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_group.o(.text.lv_group_focus_next)
</UL>
<P><STRONG><a name="[91]"></a>_lv_ll_get_prev</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_ll.o(.text._lv_ll_get_prev))
<BR><BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_get_point_pos_by_id
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_group.o(.text.lv_group_focus_prev)
</UL>
<P><STRONG><a name="[90]"></a>_lv_ll_get_tail</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_ll.o(.text._lv_ll_get_tail))
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_get_point_pos_by_id
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_group.o(.text.lv_group_focus_prev)
</UL>
<P><STRONG><a name="[133]"></a>_lv_ll_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_ll.o(.text._lv_ll_init))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_group_init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_timer_core_init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_decoder_init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_fs_init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_anim_core_init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_constructor
</UL>

<P><STRONG><a name="[16f]"></a>_lv_ll_ins_head</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lv_ll.o(.text._lv_ll_ins_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_create
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_create
</UL>

<P><STRONG><a name="[171]"></a>_lv_ll_ins_tail</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lv_ll.o(.text._lv_ll_ins_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _lv_ll_ins_tail &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
</UL>

<P><STRONG><a name="[213]"></a>_lv_ll_is_empty</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_ll.o(.text._lv_ll_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
</UL>

<P><STRONG><a name="[16e]"></a>_lv_ll_remove</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lv_ll.o(.text._lv_ll_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _lv_ll_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_clear
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_destructor
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_timer
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_del
</UL>

<P><STRONG><a name="[2ab]"></a>_lv_obj_get_ext_draw_size</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj_draw.o(.text._lv_obj_get_ext_draw_size))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_visible
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
</UL>

<P><STRONG><a name="[172]"></a>_lv_obj_style_create_transition</STRONG> (Thumb, 312 bytes, Stack size 104 bytes, lv_obj_style.o(.text._lv_obj_style_create_transition))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = _lv_obj_style_create_transition &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_trans_style
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[177]"></a>_lv_obj_style_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_style.o(.text._lv_obj_style_init))
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[178]"></a>_lv_obj_style_state_compare</STRONG> (Thumb, 596 bytes, Stack size 40 bytes, lv_obj_style.o(.text._lv_obj_style_state_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _lv_obj_style_state_compare &rArr; lv_style_get_prop
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_get_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[13b]"></a>_lv_refr_get_disp_refreshing</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_refr.o(.text._lv_refr_get_disp_refreshing))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_map
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_letter
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
</UL>

<P><STRONG><a name="[285]"></a>_lv_refr_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_refr.o(.text._lv_refr_init))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[2ef]"></a>_lv_style_get_prop_group</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_style.o(.text._lv_style_get_prop_group))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>

<P><STRONG><a name="[17a]"></a>_lv_timer_core_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lv_timer.o(.text._lv_timer_core_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _lv_timer_core_init
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[17b]"></a>_lv_txt_cut</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, lv_txt.o(.text._lv_txt_cut))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _lv_txt_cut &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
</UL>

<P><STRONG><a name="[261]"></a>_lv_txt_encoded_letter_next_2</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lv_txt.o(.text._lv_txt_encoded_letter_next_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _lv_txt_encoded_letter_next_2
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_width
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_is_char_under_pos
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[17d]"></a>_lv_txt_get_next_line</STRONG> (Thumb, 496 bytes, Stack size 96 bytes, lv_txt.o(.text._lv_txt_get_next_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_is_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_is_char_under_pos
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[180]"></a>_lv_txt_ins</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, lv_txt.o(.text._lv_txt_ins))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _lv_txt_ins &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy_small
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
</UL>

<P><STRONG><a name="[17e]"></a>_lv_txt_is_cmd</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, lv_txt.o(.text._lv_txt_is_cmd))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_width
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_next_line
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_is_char_under_pos
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[182]"></a>_lv_txt_set_text_vfmt</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, lv_txt.o(.text._lv_txt_set_text_vfmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = _lv_txt_set_text_vfmt &rArr; lv_vsnprintf &rArr; _vsnprintf &rArr; _ntoa_long_long &rArr; _ntoa_format
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
</UL>

<P><STRONG><a name="[1ec]"></a>_lv_utils_bsearch</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, lv_utils.o(.text._lv_utils_bsearch))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _lv_utils_bsearch
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_dsc_fmt_txt
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_glyph_dsc_id
</UL>

<P><STRONG><a name="[393]"></a>configureTimerForRunTimeStats</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, freertos.o(.text.configureTimerForRunTimeStats))
<BR><BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[1b0]"></a>draw_border_generic</STRONG> (Thumb, 1832 bytes, Stack size 184 bytes, lv_draw_rect.o(.text.draw_border_generic))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = draw_border_generic &rArr; lv_draw_mask_radius_init &rArr; lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_free_param
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_ff
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_is_any
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[395]"></a>getRunTimeCounterValue</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, freertos.o(.text.getRunTimeCounterValue))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[1b8]"></a>get_tick_gsc</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lv_chart.o(.text.get_tick_gsc))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
</UL>

<P><STRONG><a name="[210]"></a>lv_anim_del</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, lv_anim.o(.text.lv_anim_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_anim_del &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_mark_list_change
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_y
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_x
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_destructor
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value_with_anim
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_destructor
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_cursor_blink
</UL>

<P><STRONG><a name="[211]"></a>lv_anim_get</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lv_anim.o(.text.lv_anim_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_anim_get
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_end
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[175]"></a>lv_anim_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lv_anim.o(.text.lv_anim_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lv_anim_init &rArr; lv_memset_00 &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value_with_anim
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_cursor_blink
</UL>

<P><STRONG><a name="[98]"></a>lv_anim_path_ease_out</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lv_anim.o(.text.lv_anim_path_ease_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lv_anim_path_ease_out &rArr; lv_bezier3
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bezier3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj_scroll.o(.text.lv_obj_scroll_by)
</UL>
<P><STRONG><a name="[7b]"></a>lv_anim_path_linear</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lv_anim.o(.text.lv_anim_path_linear))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_anim_path_linear &rArr; lv_map
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
</UL>
<BR>[Address Reference Count : 3]<UL><LI> lv_theme_default.o(.text.style_init)
<LI> lv_anim.o(.text.lv_anim_init)
<LI> lv_style.o(.text.lv_style_transition_dsc_init)
</UL>
<P><STRONG><a name="[9f]"></a>lv_anim_path_step</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_anim.o(.text.lv_anim_path_step))
<BR>[Address Reference Count : 2]<UL><LI> lv_textarea.o(.text.lv_textarea_add_text)
<LI> lv_textarea.o(.text.start_cursor_blink)
</UL>
<P><STRONG><a name="[294]"></a>lv_anim_speed_to_time</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lv_anim.o(.text.lv_anim_speed_to_time))
<BR><BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[176]"></a>lv_anim_start</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, lv_anim.o(.text.lv_anim_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_is_empty
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_mark_list_change
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value_with_anim
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_cursor_blink
</UL>

<P><STRONG><a name="[223]"></a>lv_arc_set_angles</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_arc.o(.text.lv_arc_set_angles))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = lv_arc_set_angles &rArr; lv_arc_set_start_angle &rArr; inv_arc_area &rArr; lv_obj_calculate_ext_draw_size &rArr; lv_obj_get_style_shadow_width &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_start_angle
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_end_angle
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_update
</UL>

<P><STRONG><a name="[224]"></a>lv_arc_set_end_angle</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lv_arc.o(.text.lv_arc_set_end_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = lv_arc_set_end_angle &rArr; inv_arc_area &rArr; lv_obj_calculate_ext_draw_size &rArr; lv_obj_get_style_shadow_width &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_angles
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_update
</UL>

<P><STRONG><a name="[225]"></a>lv_arc_set_start_angle</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lv_arc.o(.text.lv_arc_set_start_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = lv_arc_set_start_angle &rArr; inv_arc_area &rArr; lv_obj_calculate_ext_draw_size &rArr; lv_obj_get_style_shadow_width &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_angles
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_update
</UL>

<P><STRONG><a name="[21f]"></a>lv_arc_set_value</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lv_arc.o(.text.lv_arc_set_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lv_arc_set_value &rArr; value_update &rArr; lv_arc_set_angles &rArr; lv_arc_set_start_angle &rArr; inv_arc_area &rArr; lv_obj_calculate_ext_draw_size &rArr; lv_obj_get_style_shadow_width &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_update
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[64]"></a>lv_area_get_size</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lv_area.o(.text.lv_area_get_size))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scrollbar_invalidate
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_refr.o(.text._lv_disp_refr_timer)
</UL>
<P><STRONG><a name="[269]"></a>lv_area_increase</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lv_area.o(.text.lv_area_increase))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
</UL>

<P><STRONG><a name="[13e]"></a>lv_area_move</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lv_area.o(.text.lv_area_move))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[238]"></a>lv_area_set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_area.o(.text.lv_area_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_area_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
</UL>

<P><STRONG><a name="[73]"></a>lv_area_set_height</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_area.o(.text.lv_area_set_height))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_flex.o(.text.children_repos)
</UL>
<P><STRONG><a name="[72]"></a>lv_area_set_width</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_area.o(.text.lv_area_set_width))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_flex.o(.text.children_repos)
</UL>
<P><STRONG><a name="[217]"></a>lv_atan2</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, lv_math.o(.text.lv_atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[321]"></a>lv_bar_get_mode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_bar.o(.text.lv_bar_get_mode))
<BR><BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_get_mode
</UL>

<P><STRONG><a name="[31f]"></a>lv_bar_get_start_value</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lv_bar.o(.text.lv_bar_get_start_value))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[31c]"></a>lv_bar_get_value</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_bar.o(.text.lv_bar_get_value))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[22c]"></a>lv_bar_set_start_value</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, lv_bar.o(.text.lv_bar_set_start_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = lv_bar_set_start_value &rArr; lv_bar_set_value_with_anim &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value_with_anim
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_set_left_value
</UL>

<P><STRONG><a name="[227]"></a>lv_bar_set_value</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lv_bar.o(.text.lv_bar_set_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = lv_bar_set_value &rArr; lv_bar_set_value_with_anim &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value_with_anim
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_constructor
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_set_value
</UL>

<P><STRONG><a name="[212]"></a>lv_bezier3</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lv_math.o(.text.lv_bezier3))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_bezier3
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_path_ease_out
</UL>

<P><STRONG><a name="[22e]"></a>lv_btnmatrix_clear_btn_ctrl</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lv_btnmatrix.o(.text.lv_btnmatrix_clear_btn_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = lv_btnmatrix_clear_btn_ctrl &rArr; invalidate_button_area &rArr; lv_obj_get_style_pad_row &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_clear_btn_ctrl_all
</UL>

<P><STRONG><a name="[230]"></a>lv_btnmatrix_clear_btn_ctrl_all</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lv_btnmatrix.o(.text.lv_btnmatrix_clear_btn_ctrl_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lv_btnmatrix_clear_btn_ctrl_all &rArr; lv_btnmatrix_clear_btn_ctrl &rArr; invalidate_button_area &rArr; lv_obj_get_style_pad_row &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_clear_btn_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_btn_ctrl
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_one_button_checked
</UL>

<P><STRONG><a name="[232]"></a>lv_btnmatrix_create</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_btnmatrix.o(.text.lv_btnmatrix_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = lv_btnmatrix_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
</UL>

<P><STRONG><a name="[199]"></a>lv_btnmatrix_get_selected_btn</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_btnmatrix.o(.text.lv_btnmatrix_get_selected_btn))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btns_value_changed_event_cb
</UL>

<P><STRONG><a name="[237]"></a>lv_btnmatrix_set_btn_ctrl</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lv_btnmatrix.o(.text.lv_btnmatrix_set_btn_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = lv_btnmatrix_set_btn_ctrl &rArr; lv_btnmatrix_clear_btn_ctrl_all &rArr; lv_btnmatrix_clear_btn_ctrl &rArr; invalidate_button_area &rArr; lv_obj_get_style_pad_row &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_clear_btn_ctrl_all
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_act
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_one_button_checked
</UL>

<P><STRONG><a name="[231]"></a>lv_btnmatrix_set_map</STRONG> (Thumb, 584 bytes, Stack size 104 bytes, lv_btnmatrix.o(.text.lv_btnmatrix_set_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = lv_btnmatrix_set_map &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_row
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_column
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_constructor
</UL>

<P><STRONG><a name="[239]"></a>lv_btnmatrix_set_one_checked</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_btnmatrix.o(.text.lv_btnmatrix_set_one_checked))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = lv_btnmatrix_set_one_checked &rArr; make_one_button_checked &rArr; lv_btnmatrix_set_btn_ctrl &rArr; lv_btnmatrix_clear_btn_ctrl_all &rArr; lv_btnmatrix_clear_btn_ctrl &rArr; invalidate_button_area &rArr; lv_obj_get_style_pad_row &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_one_button_checked
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
</UL>

<P><STRONG><a name="[23e]"></a>lv_chart_get_point_pos_by_id</STRONG> (Thumb, 412 bytes, Stack size 56 bytes, lv_chart.o(.text.lv_chart_get_point_pos_by_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = lv_chart_get_point_pos_by_id &rArr; lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_len
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_column
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
</UL>

<P><STRONG><a name="[300]"></a>lv_clamp_height</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.lv_clamp_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_clamp_height
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
</UL>

<P><STRONG><a name="[2ff]"></a>lv_clamp_width</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.lv_clamp_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_clamp_width
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
</UL>

<P><STRONG><a name="[1ae]"></a>lv_color_darken</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_color.o(.text.lv_color_darken))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_color_darken &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dark_color_filter_cb
</UL>

<P><STRONG><a name="[140]"></a>lv_color_fill</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, lv_color.o(.text.lv_color_fill))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
</UL>

<P><STRONG><a name="[24a]"></a>lv_disp_draw_buf_init</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, lv_hal_disp.o(.text.lv_disp_draw_buf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = lv_disp_draw_buf_init &rArr; lv_memset_00 &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_disp_init
</UL>

<P><STRONG><a name="[24b]"></a>lv_disp_drv_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lv_hal_disp.o(.text.lv_disp_drv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lv_disp_drv_init &rArr; lv_memset_00 &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_disp_init
</UL>

<P><STRONG><a name="[24c]"></a>lv_disp_drv_register</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, lv_hal_disp.o(.text.lv_disp_drv_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = lv_disp_drv_register &rArr; lv_theme_default_init &rArr; lv_obj_report_style_change &rArr; report_style_change_core &rArr;  report_style_change_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scrollbar_mode
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_main
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_is_inited
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_get
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_ready
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_create
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style_all
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_disp_init
</UL>

<P><STRONG><a name="[1af]"></a>lv_disp_flush_ready</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_hal_disp.o(.text.lv_disp_flush_ready))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_flush
</UL>

<P><STRONG><a name="[150]"></a>lv_disp_get_default</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_hal_disp.o(.text.lv_disp_get_default))
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scr_act
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_theme
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_prev
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_top
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_sys
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_from_obj
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[20a]"></a>lv_disp_get_dpi</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_hal_disp.o(.text.lv_disp_get_dpi))
<BR><BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_dpx
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_constructor
</UL>

<P><STRONG><a name="[13c]"></a>lv_disp_get_draw_buf</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_hal_disp.o(.text.lv_disp_get_draw_buf))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_buf_flush
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_map
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
</UL>

<P><STRONG><a name="[148]"></a>lv_disp_get_hor_res</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lv_hal_disp.o(.text.lv_disp_get_hor_res))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_letter
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[151]"></a>lv_disp_get_layer_sys</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_disp.o(.text.lv_disp_get_layer_sys))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_disp_get_layer_sys
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
</UL>

<P><STRONG><a name="[254]"></a>lv_disp_get_layer_top</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_disp.o(.text.lv_disp_get_layer_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_disp_get_layer_top
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
</UL>

<P><STRONG><a name="[255]"></a>lv_disp_get_next</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_hal_disp.o(.text.lv_disp_get_next))
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_report_style_change
</UL>

<P><STRONG><a name="[256]"></a>lv_disp_get_scr_act</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_disp.o(.text.lv_disp_get_scr_act))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_disp_get_scr_act
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scr_act
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj_and_children
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
</UL>

<P><STRONG><a name="[257]"></a>lv_disp_get_scr_prev</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_disp.o(.text.lv_disp_get_scr_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_disp_get_scr_prev
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
</UL>

<P><STRONG><a name="[258]"></a>lv_disp_get_theme</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_disp.o(.text.lv_disp_get_theme))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_disp_get_theme
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_from_obj
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[147]"></a>lv_disp_get_ver_res</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lv_hal_disp.o(.text.lv_disp_get_ver_res))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[21e]"></a>lv_draw_arc</STRONG> (Thumb, 2588 bytes, Stack size 368 bytes, lv_draw_arc.o(.text.lv_draw_arc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1452 + Unknown Stack Size
<LI>Call Chain = lv_draw_arc &rArr; lv_draw_rect &rArr; lv_draw_img &rArr; show_error &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_free_param
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_trigo_sin
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_angle_init
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rounded_area
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[21c]"></a>lv_draw_arc_dsc_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_draw_arc.o(.text.lv_draw_arc_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lv_draw_arc_dsc_init &rArr; lv_memset_00 &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[207]"></a>lv_draw_arc_get_area</STRONG> (Thumb, 1008 bytes, Stack size 48 bytes, lv_draw_arc.o(.text.lv_draw_arc_get_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lv_draw_arc_get_area
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
</UL>

<P><STRONG><a name="[25a]"></a>lv_draw_img</STRONG> (Thumb, 492 bytes, Stack size 88 bytes, lv_draw_img.o(.text.lv_draw_img))
<BR><BR>[Stack]<UL><LI>Max Depth = 868 + Unknown Stack Size
<LI>Call Chain = lv_draw_img &rArr; show_error &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_read_line
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_close
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set_height
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_get_transformed_area
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_error
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
</UL>

<P><STRONG><a name="[25f]"></a>lv_draw_img_dsc_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lv_draw_img.o(.text.lv_draw_img_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lv_draw_img_dsc_init &rArr; lv_memset_00 &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
</UL>

<P><STRONG><a name="[1c7]"></a>lv_draw_label</STRONG> (Thumb, 1352 bytes, Stack size 216 bytes, lv_draw_label.o(.text.lv_draw_label))
<BR><BR>[Stack]<UL><LI>Max Depth = 668 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = lv_draw_label &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_width
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line_dsc_init
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_letter
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_next_line
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_encoded_letter_next_2
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_error
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[1bb]"></a>lv_draw_label_dsc_init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lv_draw_label.o(.text.lv_draw_label_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lv_draw_label_dsc_init &rArr; lv_memset_00 &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_main
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_error
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[262]"></a>lv_draw_letter</STRONG> (Thumb, 936 bytes, Stack size 120 bytes, lv_draw_label.o(.text.lv_draw_letter))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = lv_draw_letter &rArr; _lv_blend_fill &rArr; _lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_dsc
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_bitmap
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_is_any
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
</UL>

<P><STRONG><a name="[1c4]"></a>lv_draw_line</STRONG> (Thumb, 2200 bytes, Stack size 296 bytes, lv_draw_line.o(.text.lv_draw_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 452 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = lv_draw_line &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_free_param
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_draw_buf
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_ff
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_is_any
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line_points_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
</UL>

<P><STRONG><a name="[1bf]"></a>lv_draw_line_dsc_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_draw_line.o(.text.lv_draw_line_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lv_draw_line_dsc_init &rArr; lv_memset_00 &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
</UL>

<P><STRONG><a name="[1b4]"></a>lv_draw_mask_add</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lv_draw_mask.o(.text.lv_draw_mask_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_draw_mask_add
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
</UL>

<P><STRONG><a name="[259]"></a>lv_draw_mask_angle_init</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, lv_draw_mask.o(.text.lv_draw_mask_angle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = lv_draw_mask_angle_init &rArr; lv_draw_mask_line_angle_init &rArr; lv_draw_mask_line_points_init &rArr; lv_memset_00 &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line_angle_init
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc
</UL>

<P><STRONG><a name="[1b6]"></a>lv_draw_mask_apply</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, lv_draw_mask.o(.text.lv_draw_mask_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lv_draw_mask_apply
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_letter
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
</UL>

<P><STRONG><a name="[83]"></a>lv_draw_mask_free_param</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lv_draw_mask.o(.text.lv_draw_mask_free_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lv_draw_mask_free_param &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_arc.o(.text.lv_draw_arc)
</UL>
<P><STRONG><a name="[1b1]"></a>lv_draw_mask_is_any</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lv_draw_mask.o(.text.lv_draw_mask_is_any))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lv_draw_mask_is_any &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_out
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_letter
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
</UL>

<P><STRONG><a name="[266]"></a>lv_draw_mask_line_angle_init</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, lv_draw_mask.o(.text.lv_draw_mask_line_angle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = lv_draw_mask_line_angle_init &rArr; lv_draw_mask_line_points_init &rArr; lv_memset_00 &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_trigo_sin
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line_points_init
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_angle_init
</UL>

<P><STRONG><a name="[265]"></a>lv_draw_mask_line_points_init</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, lv_draw_mask.o(.text.lv_draw_mask_line_points_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = lv_draw_mask_line_points_init &rArr; lv_memset_00 &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line_angle_init
</UL>

<P><STRONG><a name="[1b3]"></a>lv_draw_mask_radius_init</STRONG> (Thumb, 972 bytes, Stack size 88 bytes, lv_draw_mask.o(.text.lv_draw_mask_radius_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = lv_draw_mask_radius_init &rArr; lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
</UL>

<P><STRONG><a name="[268]"></a>lv_draw_mask_remove_custom</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lv_draw_mask.o(.text.lv_draw_mask_remove_custom))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_draw_mask_remove_custom
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[85]"></a>lv_draw_mask_remove_id</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lv_draw_mask.o(.text.lv_draw_mask_remove_id))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_custom
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_line.o(.text.lv_draw_line)
</UL>
<P><STRONG><a name="[222]"></a>lv_draw_rect</STRONG> (Thumb, 5568 bytes, Stack size 216 bytes, lv_draw_rect.o(.text.lv_draw_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 1084 + Unknown Stack Size
<LI>Call Chain = lv_draw_rect &rArr; lv_draw_img &rArr; show_error &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_free_param
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_increase
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img_dsc_init
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_map
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_ff
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_is_any
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_blur_corner
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grad_get
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_out
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_error
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[220]"></a>lv_draw_rect_dsc_init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lv_draw_rect.o(.text.lv_draw_rect_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lv_draw_rect_dsc_init &rArr; lv_memset_00 &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_error
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[1aa]"></a>lv_event_get_code</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_event.o(.text.lv_event_get_code))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_event
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cont_scroll_end_event_cb
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[2c9]"></a>lv_event_get_indev</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_event.o(.text.lv_event_get_indev))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[21b]"></a>lv_event_get_param</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_event.o(.text.lv_event_get_param))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[197]"></a>lv_event_get_target</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_event.o(.text.lv_event_get_target))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_event
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cont_scroll_end_event_cb
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btns_value_changed_event_cb
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[9b]"></a>lv_event_send</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, lv_event.o(.text.lv_event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send_core
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_self_width
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_self_height
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_by_raw
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_anim_ready_cb
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cont_scroll_end_event_cb
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_refr.o(.text.lv_refr_obj_and_children)
</UL>
<P><STRONG><a name="[23a]"></a>lv_event_set_ext_draw_size</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lv_event.o(.text.lv_event_set_ext_draw_size))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
</UL>

<P><STRONG><a name="[26f]"></a>lv_extra_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_extra.o(.text.lv_extra_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_extra_init &rArr; lv_grid_init &rArr; lv_layout_register &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_grid_init
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_flex_init
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[270]"></a>lv_flex_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lv_flex.o(.text.lv_flex_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lv_flex_init &rArr; lv_layout_register &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_layout_register
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_extra_init
</UL>

<P><STRONG><a name="[c8]"></a>lv_font_get_bitmap_fmt_txt</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lv_font_fmt_txt.o(.text.lv_font_get_bitmap_fmt_txt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_font_get_bitmap_fmt_txt &rArr; get_glyph_dsc_id &rArr; _lv_utils_bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_glyph_dsc_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_font_montserrat_14.o(.rodata.lv_font_montserrat_14)
</UL>
<P><STRONG><a name="[264]"></a>lv_font_get_glyph_bitmap</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_font.o(.text.lv_font_get_glyph_bitmap))
<BR><BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_letter
</UL>

<P><STRONG><a name="[263]"></a>lv_font_get_glyph_dsc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_font.o(.text.lv_font_get_glyph_dsc))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_letter
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
</UL>

<P><STRONG><a name="[c7]"></a>lv_font_get_glyph_dsc_fmt_txt</STRONG> (Thumb, 296 bytes, Stack size 40 bytes, lv_font_fmt_txt.o(.text.lv_font_get_glyph_dsc_fmt_txt))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = lv_font_get_glyph_dsc_fmt_txt &rArr; get_glyph_dsc_id &rArr; _lv_utils_bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_utils_bsearch
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_glyph_dsc_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_font_montserrat_14.o(.rodata.lv_font_montserrat_14)
</UL>
<P><STRONG><a name="[17f]"></a>lv_font_get_glyph_width</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, lv_font.o(.text.lv_font_get_glyph_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_dsc
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_width
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_next_line
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_is_char_under_pos
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
</UL>

<P><STRONG><a name="[27f]"></a>lv_fs_close</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lv_fs.o(.text.lv_fs_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_fs_close
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_close
</UL>

<P><STRONG><a name="[273]"></a>lv_fs_get_drv</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lv_fs.o(.text.lv_fs_get_drv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_fs_get_drv
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
</UL>

<P><STRONG><a name="[274]"></a>lv_fs_get_ext</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lv_fs.o(.text.lv_fs_get_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_fs_get_ext &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
</UL>

<P><STRONG><a name="[275]"></a>lv_fs_open</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lv_fs.o(.text.lv_fs_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lv_fs_open &rArr; lv_fs_get_drv
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_drv
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
</UL>

<P><STRONG><a name="[280]"></a>lv_fs_read</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lv_fs.o(.text.lv_fs_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_fs_read
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_read_line
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
</UL>

<P><STRONG><a name="[281]"></a>lv_fs_seek</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lv_fs.o(.text.lv_fs_seek))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_read_line
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
</UL>

<P><STRONG><a name="[271]"></a>lv_grid_init</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, lv_grid.o(.text.lv_grid_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lv_grid_init &rArr; lv_layout_register &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_layout_register
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_extra_init
</UL>

<P><STRONG><a name="[276]"></a>lv_group_add_obj</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, lv_group.o(.text.lv_group_add_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lv_group_add_obj &rArr; lv_group_refocus &rArr; lv_group_focus_prev &rArr; focus_next_core &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_tail
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_refocus
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
</UL>

<P><STRONG><a name="[279]"></a>lv_group_focus_next</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_group.o(.text.lv_group_focus_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = lv_group_focus_next &rArr; focus_next_core &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_refocus
</UL>

<P><STRONG><a name="[27a]"></a>lv_group_focus_prev</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_group.o(.text.lv_group_focus_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = lv_group_focus_prev &rArr; focus_next_core &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_refocus
</UL>

<P><STRONG><a name="[2b7]"></a>lv_group_get_default</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_group.o(.text.lv_group_get_default))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
</UL>

<P><STRONG><a name="[219]"></a>lv_group_get_editing</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_group.o(.text.lv_group_get_editing))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[27b]"></a>lv_group_remove_obj</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, lv_group.o(.text.lv_group_remove_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lv_group_remove_obj &rArr; lv_group_refocus &rArr; lv_group_focus_prev &rArr; focus_next_core &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_refocus
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_indev
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_destructor
</UL>

<P><STRONG><a name="[21a]"></a>lv_group_set_editing</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lv_group.o(.text.lv_group_set_editing))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_group_set_editing &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_indev
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[67]"></a>lv_img_buf_get_px_alpha</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, lv_img_buf.o(.text.lv_img_buf_get_px_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_img_buf_get_px_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img_buf.o(.text._lv_img_buf_transform_anti_alias)
</UL>
<P><STRONG><a name="[66]"></a>lv_img_buf_get_px_color</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, lv_img_buf.o(.text.lv_img_buf_get_px_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_img_buf_get_px_color
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_get_px_size
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy_small
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img_buf.o(.text._lv_img_buf_transform_anti_alias)
</UL>
<P><STRONG><a name="[27d]"></a>lv_img_cache_invalidate_src</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lv_img_cache.o(.text.lv_img_cache_invalidate_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_img_cache_invalidate_src &rArr; lv_img_decoder_close &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_close
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_match
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_set_size
</UL>

<P><STRONG><a name="[27e]"></a>lv_img_cache_set_size</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lv_img_cache.o(.text.lv_img_cache_set_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = lv_img_cache_set_size &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_invalidate_src
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[27c]"></a>lv_img_cf_get_px_size</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, lv_draw_img.o(.text.lv_img_cf_get_px_size))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_read_line
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_buf_get_px_color
</UL>

<P><STRONG><a name="[164]"></a>lv_img_cf_has_alpha</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lv_draw_img.o(.text.lv_img_cf_has_alpha))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform_init
</UL>

<P><STRONG><a name="[163]"></a>lv_img_cf_is_chroma_keyed</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lv_draw_img.o(.text.lv_img_cf_is_chroma_keyed))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform_init
</UL>

<P><STRONG><a name="[69]"></a>lv_img_decoder_built_in_close</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lv_img_decoder.o(.text.lv_img_decoder_built_in_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lv_img_decoder_built_in_close &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_close
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img_decoder.o(.text._lv_img_decoder_init)
</UL>
<P><STRONG><a name="[6c]"></a>lv_img_decoder_built_in_info</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, lv_img_decoder.o(.text.lv_img_decoder_built_in_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lv_img_decoder_built_in_info &rArr; lv_fs_open &rArr; lv_fs_get_drv
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_ext
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_close
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img_decoder.o(.text._lv_img_decoder_init)
</UL>
<P><STRONG><a name="[6b]"></a>lv_img_decoder_built_in_open</STRONG> (Thumb, 352 bytes, Stack size 40 bytes, lv_img_decoder.o(.text.lv_img_decoder_built_in_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_img_decoder_built_in_open &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_get_px_size
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_close
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_seek
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_ext
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_make
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img_decoder.o(.text._lv_img_decoder_init)
</UL>
<P><STRONG><a name="[6a]"></a>lv_img_decoder_built_in_read_line</STRONG> (Thumb, 824 bytes, Stack size 72 bytes, lv_img_decoder.o(.text.lv_img_decoder_built_in_read_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = lv_img_decoder_built_in_read_line &rArr; lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_get_px_size
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_seek
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img_decoder.o(.text._lv_img_decoder_init)
</UL>
<P><STRONG><a name="[167]"></a>lv_img_decoder_close</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lv_img_decoder.o(.text.lv_img_decoder_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lv_img_decoder_close &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_invalidate_src
</UL>

<P><STRONG><a name="[16a]"></a>lv_img_decoder_create</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_img_decoder.o(.text.lv_img_decoder_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = lv_img_decoder_create &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_decoder_init
</UL>

<P><STRONG><a name="[26e]"></a>lv_img_decoder_get_info</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lv_img_decoder.o(.text.lv_img_decoder_get_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = lv_img_decoder_get_info &rArr; lv_memset_00 &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
</UL>

<P><STRONG><a name="[168]"></a>lv_img_decoder_open</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, lv_img_decoder.o(.text.lv_img_decoder_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_img_decoder_open &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
</UL>

<P><STRONG><a name="[25e]"></a>lv_img_decoder_read_line</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, lv_img_decoder.o(.text.lv_img_decoder_read_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_img_decoder_read_line
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
</UL>

<P><STRONG><a name="[26d]"></a>lv_img_src_get_type</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lv_draw_img.o(.text.lv_img_src_get_type))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_match
</UL>

<P><STRONG><a name="[1cc]"></a>lv_indev_get_act</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_indev.o(.text.lv_indev_get_act))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send_core
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[1ed]"></a>lv_indev_get_next</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_hal_indev.o(.text.lv_indev_get_next))
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_indev
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
</UL>

<P><STRONG><a name="[216]"></a>lv_indev_get_point</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lv_indev.o(.text.lv_indev_get_point))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[2db]"></a>lv_indev_get_scroll_dir</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lv_indev.o(.text.lv_indev_get_scroll_dir))
<BR><BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
</UL>

<P><STRONG><a name="[2c0]"></a>lv_indev_get_scroll_obj</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lv_indev.o(.text.lv_indev_get_scroll_obj))
<BR><BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
</UL>

<P><STRONG><a name="[1ee]"></a>lv_indev_get_type</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_indev.o(.text.lv_indev_get_type))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_indev
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[358]"></a>lv_indev_get_vect</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lv_indev.o(.text.lv_indev_get_vect))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[235]"></a>lv_indev_reset_long_press</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_indev.o(.text.lv_indev_reset_long_press))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_indev_reset_long_press
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
</UL>

<P><STRONG><a name="[123]"></a>lv_init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lv_obj.o(.text.lv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lv_init &rArr; lv_extra_init &rArr; lv_grid_init &rArr; lv_layout_register &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_group_init
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_init
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_set_size
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_extra_init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_timer_core_init
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_decoder_init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_fs_init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_anim_core_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>

<P><STRONG><a name="[126]"></a>lv_label_create</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lv_label.o(.text.lv_label_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = lv_label_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_constructor
</UL>

<P><STRONG><a name="[28e]"></a>lv_label_get_letter_on</STRONG> (Thumb, 512 bytes, Stack size 88 bytes, lv_label.o(.text.lv_label_get_letter_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = lv_label_get_letter_on &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_style_text_align
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_width
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_next_line
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_encoded_letter_next_2
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_is_cmd
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_letter_space
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_up
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_down
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[290]"></a>lv_label_get_letter_pos</STRONG> (Thumb, 424 bytes, Stack size 72 bytes, lv_label.o(.text.lv_label_get_letter_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = lv_label_get_letter_pos &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_style_text_align
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_width
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_next_line
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_letter_space
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_up
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_down
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
</UL>

<P><STRONG><a name="[34c]"></a>lv_label_get_text</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_label.o(.text.lv_label_get_text))
<BR><BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_get_text
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[350]"></a>lv_label_get_text_selection_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_label.o(.text.lv_label_get_text_selection_end))
<BR><BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_clear_selection
</UL>

<P><STRONG><a name="[34f]"></a>lv_label_get_text_selection_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_label.o(.text.lv_label_get_text_selection_start))
<BR><BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_clear_selection
</UL>

<P><STRONG><a name="[291]"></a>lv_label_ins_text</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, lv_label.o(.text.lv_label_ins_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_label_ins_text &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_label_get_letter_on &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_ins
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
</UL>

<P><STRONG><a name="[292]"></a>lv_label_is_char_under_pos</STRONG> (Thumb, 464 bytes, Stack size 88 bytes, lv_label.o(.text.lv_label_is_char_under_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = lv_label_is_char_under_pos &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_style_text_align
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_width
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_next_line
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_encoded_letter_next_2
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_is_cmd
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_letter_space
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[128]"></a>lv_label_set_long_mode</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, lv_label.o(.text.lv_label_set_long_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = lv_label_set_long_mode &rArr; lv_label_refr_text &rArr; lv_label_get_letter_on &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_revert_dots
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_constructor
</UL>

<P><STRONG><a name="[127]"></a>lv_label_set_recolor</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lv_label.o(.text.lv_label_set_recolor))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = lv_label_set_recolor &rArr; lv_label_refr_text &rArr; lv_label_get_letter_on &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>

<P><STRONG><a name="[15a]"></a>lv_label_set_text</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, lv_label.o(.text.lv_label_set_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_label_get_letter_on &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_constructor
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_constructor
</UL>

<P><STRONG><a name="[12a]"></a>lv_label_set_text_fmt</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, lv_label.o(.text.lv_label_set_text_fmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = lv_label_set_text_fmt &rArr; lv_label_refr_text &rArr; lv_label_get_letter_on &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_set_text_vfmt
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[295]"></a>lv_label_set_text_sel_end</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_label.o(.text.lv_label_set_text_sel_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_label_set_text_sel_end &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_clear_selection
</UL>

<P><STRONG><a name="[296]"></a>lv_label_set_text_sel_start</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_label.o(.text.lv_label_set_text_sel_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_label_set_text_sel_start &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_clear_selection
</UL>

<P><STRONG><a name="[272]"></a>lv_layout_register</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, lv_obj_pos.o(.text.lv_layout_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_layout_register &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_grid_init
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_flex_init
</UL>

<P><STRONG><a name="[1c3]"></a>lv_map</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lv_math.o(.text.lv_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_map
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_path_ease_out
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_path_linear
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_get_point_pos_by_id
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_update
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[170]"></a>lv_mem_alloc</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, lv_mem.o(.text.lv_mem_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_malloc
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_monitor
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_tail
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_set_size
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_trans_style
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_set_text_vfmt
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_constructor
</UL>

<P><STRONG><a name="[14d]"></a>lv_mem_buf_free_all</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lv_mem.o(.text.lv_mem_buf_free_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lv_mem_buf_free_all &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[1b2]"></a>lv_mem_buf_get</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, lv_mem.o(.text.lv_mem_buf_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_buf_flush
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_letter
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_blur_corner
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_read_line
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
</UL>

<P><STRONG><a name="[7a]"></a>lv_mem_buf_release</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lv_mem.o(.text.lv_mem_buf_release))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_buf_flush
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_letter
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_blur_corner
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_read_line
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_grid.o(.text.grid_update)
</UL>
<P><STRONG><a name="[15c]"></a>lv_mem_free</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lv_mem.o(.text.lv_mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_clear
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_set_size
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_free_param
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_destructor
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_free_all
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_draw_mask_cleanup
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_close
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_close
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_destructor
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_destructor
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_timer
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_del
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_destructor
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_destructor
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_dot_tmp_free
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_destructor
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_destructor
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_destructor
</UL>

<P><STRONG><a name="[284]"></a>lv_mem_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_mem.o(.text.lv_mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = lv_mem_init &rArr; lv_tlsf_create_with_pool &rArr; lv_tlsf_add_pool &rArr; block_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_create_with_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[299]"></a>lv_mem_monitor</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lv_mem.o(.text.lv_mem_monitor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lv_mem_monitor &rArr; lv_tlsf_walk_pool
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_walk_pool
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_get_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
</UL>

<P><STRONG><a name="[1f4]"></a>lv_mem_realloc</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lv_mem.o(.text.lv_mem_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_layout_register
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_style
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_trans_style
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_constructor
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
</UL>

<P><STRONG><a name="[142]"></a>lv_memcpy</STRONG> (Thumb, 292 bytes, Stack size 20 bytes, lv_mem.o(.text.lv_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_map
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_blur_corner
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_timer
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_realloc
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[26b]"></a>lv_memset</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, lv_mem.o(.text.lv_memset))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_monitor
</UL>

<P><STRONG><a name="[14b]"></a>lv_memset_00</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lv_mem.o(.text.lv_memset_00))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_memset_00 &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_set_size
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_init
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_style
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_trans_style
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img_dsc_init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_draw_mask_cleanup
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc_dsc_init
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line_dsc_init
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_letter
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_angle
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line_points_init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_create
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_invalidate_src
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_init
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_draw_buf_init
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_transition_dsc_init
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
</UL>

<P><STRONG><a name="[1b5]"></a>lv_memset_ff</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lv_mem.o(.text.lv_memset_ff))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = lv_memset_ff
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
</UL>

<P><STRONG><a name="[29f]"></a>lv_obj_add_event_cb</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, lv_event.o(.text.lv_obj_add_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_obj_add_event_cb &rArr; lv_obj_allocate_spec_attr &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
</UL>

<P><STRONG><a name="[80]"></a>lv_obj_add_flag</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, lv_obj.o(.text.lv_obj_add_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = lv_obj_add_flag &rArr; lv_obj_get_scrollbar_area &rArr; lv_obj_get_scroll_left &rArr; lv_obj_get_self_width &rArr; lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_layout_positioned
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_constructor
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_constructor
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_constructor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_checkbox.o(.text.lv_checkbox_constructor)
</UL>
<P><STRONG><a name="[2a3]"></a>lv_obj_add_state</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_add_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_add_state &rArr; lv_obj_set_state &rArr; _lv_obj_style_create_transition &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[b5]"></a>lv_obj_add_style</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, lv_obj_style.o(.text.lv_obj_add_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lv_obj_add_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme_apply
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_theme_default.o(.text.theme_apply)
</UL>
<P><STRONG><a name="[12b]"></a>lv_obj_align</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = lv_obj_align &rArr; lv_obj_set_pos &rArr; lv_obj_set_y &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_align
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[278]"></a>lv_obj_allocate_spec_attr</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lv_obj.o(.text.lv_obj_allocate_spec_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lv_obj_allocate_spec_attr &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_ext_click_area
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scrollbar_mode
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scroll_snap_x
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_by_raw
</UL>

<P><STRONG><a name="[2a9]"></a>lv_obj_area_is_visible</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, lv_obj_pos.o(.text.lv_obj_area_is_visible))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = lv_obj_area_is_visible &rArr; _lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_prev
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_top
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_sys
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_ext_draw_size
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_visible
</UL>

<P><STRONG><a name="[206]"></a>lv_obj_calculate_ext_draw_size</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, lv_obj_draw.o(.text.lv_obj_calculate_ext_draw_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = lv_obj_calculate_ext_draw_size &rArr; lv_obj_get_style_shadow_width &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_width
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_spread
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_opa
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_ofs_y
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_ofs_x
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_width
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_pad
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_opa
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[28f]"></a>lv_obj_calculate_style_text_align</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lv_obj_style.o(.text.lv_obj_calculate_style_text_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lv_obj_calculate_style_text_align &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_is_char_under_pos
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
</UL>

<P><STRONG><a name="[38d]"></a>lv_obj_check_type</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_check_type))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme_apply
</UL>

<P><STRONG><a name="[233]"></a>lv_obj_class_create_obj</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, lv_obj_class.o(.text.lv_obj_class_create_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_obj_class_create_obj &rArr; lv_obj_allocate_spec_attr &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_create
</UL>

<P><STRONG><a name="[234]"></a>lv_obj_class_init_obj</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, lv_obj_class.o(.text.lv_obj_class_init_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_apply
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_default
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_group_def
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_construct
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_enable_style_refresh
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_create
</UL>

<P><STRONG><a name="[214]"></a>lv_obj_clear_flag</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, lv_obj.o(.text.lv_obj_clear_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = lv_obj_clear_flag &rArr; lv_obj_get_scrollbar_area &rArr; lv_obj_get_scroll_left &rArr; lv_obj_get_self_width &rArr; lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_layout_positioned
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_constructor
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_constructor
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_constructor
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_constructor
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_constructor
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_constructor
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[2b9]"></a>lv_obj_clear_state</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_clear_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_clear_state &rArr; lv_obj_set_state &rArr; _lv_obj_style_create_transition &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[82]"></a>lv_obj_create</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_obj.o(.text.lv_obj_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = lv_obj_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_hal_disp.o(.text.lv_disp_drv_register)
</UL>
<P><STRONG><a name="[1c1]"></a>lv_obj_draw_dsc_init</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lv_obj_draw.o(.text.lv_obj_draw_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lv_obj_draw_dsc_init &rArr; lv_memset_00 &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
</UL>

<P><STRONG><a name="[2b4]"></a>lv_obj_enable_style_refresh</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_style.o(.text.lv_obj_enable_style_refresh))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_destructor
</UL>

<P><STRONG><a name="[1cd]"></a>lv_obj_event_base</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lv_event.o(.text.lv_obj_event_base))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_obj_event_base
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send_core
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_event
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[1a4]"></a>lv_obj_get_child</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lv_obj_tree.o(.text.lv_obj_get_child))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_get_tab_btns
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_get_content
</UL>

<P><STRONG><a name="[1fa]"></a>lv_obj_get_child_cnt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_tree.o(.text.lv_obj_get_child_cnt))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layout_update_core
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_style_change_core
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj_and_children
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>

<P><STRONG><a name="[28d]"></a>lv_obj_get_content_coords</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_get_content_coords))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lv_obj_get_content_coords &rArr; lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_increase
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_is_char_under_pos
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
</UL>

<P><STRONG><a name="[1c9]"></a>lv_obj_get_content_height</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_get_content_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lv_obj_get_content_height &rArr; lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_get_point_pos_by_id
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
</UL>

<P><STRONG><a name="[1a3]"></a>lv_obj_get_content_width</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_get_content_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lv_obj_get_content_width &rArr; lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_act
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cont_scroll_end_event_cb
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_get_point_pos_by_id
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_point
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
</UL>

<P><STRONG><a name="[1db]"></a>lv_obj_get_coords</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_pos.o(.text.lv_obj_get_coords))
<BR><BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_point
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_button_from_point
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[209]"></a>lv_obj_get_disp</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lv_obj_tree.o(.text.lv_obj_get_disp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_obj_get_disp
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_from_obj
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[218]"></a>lv_obj_get_group</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_get_group))
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[77]"></a>lv_obj_get_height</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_pos.o(.text.lv_obj_get_height))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_center
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_button_from_point
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_down
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_flex.o(.text.find_track_end)
</UL>
<P><STRONG><a name="[2d2]"></a>lv_obj_get_local_style_prop</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, lv_obj_style.o(.text.lv_obj_get_local_style_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lv_obj_get_local_style_prop &rArr; lv_style_get_prop
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_get_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
</UL>

<P><STRONG><a name="[198]"></a>lv_obj_get_parent</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_tree.o(.text.lv_obj_get_parent))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_view_recursive
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_layout_positioned
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj_and_children
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_grow
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme_apply
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cont_scroll_end_event_cb
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btns_value_changed_event_cb
</UL>

<P><STRONG><a name="[2aa]"></a>lv_obj_get_screen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj_tree.o(.text.lv_obj_get_screen))
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
</UL>

<P><STRONG><a name="[19e]"></a>lv_obj_get_scroll_bottom</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, lv_obj_scroll.o(.text.lv_obj_get_scroll_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_obj_get_scroll_bottom &rArr; lv_obj_get_self_height &rArr; lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_self_height
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_y
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_readjust_scroll
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_auto_size
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
</UL>

<P><STRONG><a name="[2c3]"></a>lv_obj_get_scroll_dir</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.lv_obj_get_scroll_dir))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[1ab]"></a>lv_obj_get_scroll_end</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lv_obj_scroll.o(.text.lv_obj_get_scroll_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_obj_get_scroll_end &rArr; lv_anim_get
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_get
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cont_scroll_end_event_cb
</UL>

<P><STRONG><a name="[19d]"></a>lv_obj_get_scroll_left</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, lv_obj_scroll.o(.text.lv_obj_get_scroll_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_get_scroll_left &rArr; lv_obj_get_self_width &rArr; lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_self_width
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_x
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_constructor
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_readjust_scroll
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_auto_size
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_get_point_pos_by_id
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_point
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
</UL>

<P><STRONG><a name="[19c]"></a>lv_obj_get_scroll_right</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, lv_obj_scroll.o(.text.lv_obj_get_scroll_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_obj_get_scroll_right &rArr; lv_obj_get_self_width &rArr; lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_self_width
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_x
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_readjust_scroll
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_auto_size
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
</UL>

<P><STRONG><a name="[19f]"></a>lv_obj_get_scroll_top</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.lv_obj_get_scroll_top))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_constructor
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_auto_size
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_get_point_pos_by_id
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
</UL>

<P><STRONG><a name="[1d5]"></a>lv_obj_get_scroll_x</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.lv_obj_get_scroll_x))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
</UL>

<P><STRONG><a name="[1d4]"></a>lv_obj_get_scroll_y</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.lv_obj_get_scroll_y))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
</UL>

<P><STRONG><a name="[2a2]"></a>lv_obj_get_scrollbar_area</STRONG> (Thumb, 1646 bytes, Stack size 88 bytes, lv_obj_scroll.o(.text.lv_obj_get_scrollbar_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = lv_obj_get_scrollbar_area &rArr; lv_obj_get_scroll_left &rArr; lv_obj_get_self_width &rArr; lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_scroll_obj
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_scroll_dir
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scrollbar_invalidate
</UL>

<P><STRONG><a name="[2c1]"></a>lv_obj_get_scrollbar_mode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.lv_obj_get_scrollbar_mode))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[2d6]"></a>lv_obj_get_self_height</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_get_self_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lv_obj_get_self_height &rArr; lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
</UL>

<P><STRONG><a name="[2da]"></a>lv_obj_get_self_width</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_get_self_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lv_obj_get_self_width &rArr; lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
</UL>

<P><STRONG><a name="[1d8]"></a>lv_obj_get_state</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_get_state))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
</UL>

<P><STRONG><a name="[78]"></a>lv_obj_get_style_prop</STRONG> (Thumb, 408 bytes, Stack size 64 bytes, lv_obj_style.o(.text.lv_obj_get_style_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + In Cycle
<LI>Call Chain = lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_prop_get_default
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_get_prop
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_prop_group
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_width
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_height
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_radius
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_layout
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_clip_corner
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_post
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_opa
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_align
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_constructor
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_layout
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_height
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_arc_dsc
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_color_filtered
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_width
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_spread
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_opa
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_ofs_y
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_ofs_x
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_width
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_pad
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_opa
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_blend_mode
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_style_text_align
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_start_cb
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_row
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_column
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_height
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_row_span
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_row_pos
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_row_dsc
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_col_span
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_col_pos
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_col_dsc
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_row
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_column
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_height
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_flex_grow
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_act
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_column
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_height
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_point
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_arc_width
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value_with_anim
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_row
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_column
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_letter_space
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_column
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_line_width
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_letter_space
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_anim_speed
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_width
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_height
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_letter_space
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_min_height
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_max_height
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_cursor_blink
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
</UL>
<BR>[Address Reference Count : 4]<UL><LI> lv_obj_draw.o(.text.lv_obj_init_draw_rect_dsc)
<LI> lv_flex.o(.text.flex_update)
<LI> lv_grid.o(.text.grid_update)
<LI> lv_checkbox.o(.text.lv_checkbox_event)
</UL>
<P><STRONG><a name="[76]"></a>lv_obj_get_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_pos.o(.text.lv_obj_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_center
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_button_from_point
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_flex.o(.text.find_track_end)
</UL>
<P><STRONG><a name="[1ce]"></a>lv_obj_has_flag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_has_flag))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send_core
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
</UL>

<P><STRONG><a name="[1a5]"></a>lv_obj_has_flag_any</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_has_flag_any))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_layout_positioned
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
</UL>

<P><STRONG><a name="[21d]"></a>lv_obj_init_draw_arc_dsc</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, lv_obj_draw.o(.text.lv_obj_init_draw_arc_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = lv_obj_init_draw_arc_dsc &rArr; lv_obj_get_style_opa &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_blend_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[1bc]"></a>lv_obj_init_draw_label_dsc</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, lv_obj_draw.o(.text.lv_obj_init_draw_label_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = lv_obj_init_draw_label_dsc &rArr; lv_obj_get_style_opa &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_color_filtered
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_blend_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[1c0]"></a>lv_obj_init_draw_line_dsc</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, lv_obj_draw.o(.text.lv_obj_init_draw_line_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lv_obj_init_draw_line_dsc &rArr; lv_obj_get_style_opa &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_blend_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
</UL>

<P><STRONG><a name="[221]"></a>lv_obj_init_draw_rect_dsc</STRONG> (Thumb, 584 bytes, Stack size 32 bytes, lv_obj_draw.o(.text.lv_obj_init_draw_rect_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = lv_obj_init_draw_rect_dsc &rArr; lv_obj_get_style_shadow_width &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_color_filtered
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_width
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_spread
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_opa
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_ofs_y
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_ofs_x
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_width
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_pad
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_opa
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_blend_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[1a7]"></a>lv_obj_invalidate</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_invalidate))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_ext_draw_size
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scrollbar_mode
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_by_raw
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_point
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_start_angle
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_end_angle
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value_with_anim
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_anim_ready
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_anim
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_sel_start
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_sel_end
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ofs_y_anim
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ofs_x_anim
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[1ad]"></a>lv_obj_invalidate_area</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_invalidate_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scrollbar_invalidate
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_point
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_blink_anim_cb
</UL>

<P><STRONG><a name="[2c2]"></a>lv_obj_is_editable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lv_obj_class.o(.text.lv_obj_is_editable))
<BR><BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_editable
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_editable
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[2b8]"></a>lv_obj_is_group_def</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lv_obj_class.o(.text.lv_obj_is_group_def))
<BR><BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_group_def
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_group_def
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
</UL>

<P><STRONG><a name="[2a0]"></a>lv_obj_is_layout_positioned</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.lv_obj_is_layout_positioned))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lv_obj_is_layout_positioned &rArr; lv_obj_get_style_layout &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_layout
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
</UL>

<P><STRONG><a name="[205]"></a>lv_obj_is_visible</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_is_visible))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = lv_obj_is_visible &rArr; lv_obj_area_is_visible &rArr; _lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_ext_draw_size
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
</UL>

<P><STRONG><a name="[2a1]"></a>lv_obj_mark_layout_as_dirty</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.lv_obj_mark_layout_as_dirty))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_obj_mark_layout_as_dirty &rArr; lv_obj_get_disp
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_resume
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_grow
</UL>

<P><STRONG><a name="[1a8]"></a>lv_obj_move_children_by</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, lv_obj_pos.o(.text.lv_obj_move_children_by))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = lv_obj_move_children_by &rArr;  lv_obj_move_children_by (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_by_raw
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
</UL>

<P><STRONG><a name="[2fb]"></a>lv_obj_move_to</STRONG> (Thumb, 270 bytes, Stack size 48 bytes, lv_obj_pos.o(.text.lv_obj_move_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = lv_obj_move_to &rArr; lv_obj_scrollbar_invalidate &rArr; lv_obj_get_scrollbar_area &rArr; lv_obj_get_scroll_left &rArr; lv_obj_get_self_width &rArr; lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scrollbar_invalidate
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
</UL>

<P><STRONG><a name="[2fd]"></a>lv_obj_readjust_scroll</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, lv_obj_scroll.o(.text.lv_obj_readjust_scroll))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = lv_obj_readjust_scroll &rArr; lv_obj_scroll_by &rArr; scroll_by_raw &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
</UL>

<P><STRONG><a name="[20e]"></a>lv_obj_refr_pos</STRONG> (Thumb, 538 bytes, Stack size 48 bytes, lv_obj_pos.o(.text.lv_obj_refr_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = lv_obj_refr_pos &rArr; lv_obj_move_to &rArr; lv_obj_scrollbar_invalidate &rArr; lv_obj_get_scrollbar_area &rArr; lv_obj_get_scroll_left &rArr; lv_obj_get_self_width &rArr; lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_layout_positioned
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layout_update_core
</UL>

<P><STRONG><a name="[1d6]"></a>lv_obj_refr_size</STRONG> (Thumb, 626 bytes, Stack size 64 bytes, lv_obj_pos.o(.text.lv_obj_refr_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = lv_obj_refr_size &rArr; lv_obj_scroll_to &rArr; lv_obj_scroll_to_y &rArr; lv_obj_scroll_by &rArr; scroll_by_raw &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_y
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_x
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scrollbar_invalidate
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_readjust_scroll
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_clamp_width
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_clamp_height
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_height
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_auto_size
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layout_update_core
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
</UL>

<P><STRONG><a name="[22f]"></a>lv_obj_refresh_ext_draw_size</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lv_obj_draw.o(.text.lv_obj_refresh_ext_draw_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_btn_ctrl
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_clear_btn_ctrl
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[23b]"></a>lv_obj_refresh_self_size</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_refresh_self_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lv_obj_refresh_self_size &rArr; lv_obj_get_style_width &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_height
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_size
</UL>

<P><STRONG><a name="[2a6]"></a>lv_obj_refresh_style</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, lv_obj_style.o(.text.lv_obj_refresh_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_style
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_cb
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_style_change_core
</UL>

<P><STRONG><a name="[2bb]"></a>lv_obj_remove_style</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, lv_obj_style.o(.text.lv_obj_remove_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_apply
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_destructor
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style_all
</UL>

<P><STRONG><a name="[304]"></a>lv_obj_report_style_change</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lv_obj_style.o(.text.lv_obj_report_style_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lv_obj_report_style_change &rArr; report_style_change_core &rArr;  report_style_change_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_next
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_style_change_core
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[2fe]"></a>lv_obj_scroll_by</STRONG> (Thumb, 284 bytes, Stack size 96 bytes, lv_obj_scroll.o(.text.lv_obj_scroll_by))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = lv_obj_scroll_by &rArr; scroll_by_raw &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_speed_to_time
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_by_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_y
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_x
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_readjust_scroll
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
</UL>

<P><STRONG><a name="[301]"></a>lv_obj_scroll_to</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lv_obj_scroll.o(.text.lv_obj_scroll_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = lv_obj_scroll_to &rArr; lv_obj_scroll_to_y &rArr; lv_obj_scroll_by &rArr; scroll_by_raw &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_y
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_x
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
</UL>

<P><STRONG><a name="[2bd]"></a>lv_obj_scroll_to_view_recursive</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, lv_obj_scroll.o(.text.lv_obj_scroll_to_view_recursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = lv_obj_scroll_to_view_recursive &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[2cc]"></a>lv_obj_scroll_to_x</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, lv_obj_scroll.o(.text.lv_obj_scroll_to_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = lv_obj_scroll_to_x &rArr; lv_obj_scroll_by &rArr; scroll_by_raw &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_act
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
</UL>

<P><STRONG><a name="[2cb]"></a>lv_obj_scroll_to_y</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, lv_obj_scroll.o(.text.lv_obj_scroll_to_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = lv_obj_scroll_to_y &rArr; lv_obj_scroll_by &rArr; scroll_by_raw &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
</UL>

<P><STRONG><a name="[2fc]"></a>lv_obj_scrollbar_invalidate</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, lv_obj_scroll.o(.text.lv_obj_scrollbar_invalidate))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = lv_obj_scrollbar_invalidate &rArr; lv_obj_get_scrollbar_area &rArr; lv_obj_get_scroll_left &rArr; lv_obj_get_self_width &rArr; lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
</UL>

<P><STRONG><a name="[215]"></a>lv_obj_set_ext_click_area</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_set_ext_click_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lv_obj_set_ext_click_area &rArr; lv_obj_allocate_spec_attr &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_constructor
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_constructor
</UL>

<P><STRONG><a name="[308]"></a>lv_obj_set_flex_flow</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lv_flex.o(.text.lv_obj_set_flex_flow))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lv_obj_set_flex_flow &rArr; lv_obj_set_style_layout &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_layout
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_flex_flow
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
</UL>

<P><STRONG><a name="[30b]"></a>lv_obj_set_flex_grow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_flex.o(.text.lv_obj_set_flex_grow))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lv_obj_set_flex_grow &rArr; lv_obj_set_style_flex_grow &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_flex_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
</UL>

<P><STRONG><a name="[30d]"></a>lv_obj_set_height</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, lv_obj_pos.o(.text.lv_obj_set_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = lv_obj_set_height &rArr; lv_obj_set_style_height &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_height
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
</UL>

<P><STRONG><a name="[30f]"></a>lv_obj_set_local_style_prop</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, lv_obj_style.o(.text.lv_obj_set_local_style_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_init
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_y
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_x
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_width
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_layout
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_height
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_align
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_color
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_align
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_top
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_right
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_left
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_bottom
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_opa
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_color
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_flex_grow
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_flex_flow
</UL>

<P><STRONG><a name="[2a8]"></a>lv_obj_set_pos</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_set_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = lv_obj_set_pos &rArr; lv_obj_set_y &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[312]"></a>lv_obj_set_scroll_snap_x</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lv_obj_scroll.o(.text.lv_obj_set_scroll_snap_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lv_obj_set_scroll_snap_x &rArr; lv_obj_allocate_spec_attr &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
</UL>

<P><STRONG><a name="[252]"></a>lv_obj_set_scrollbar_mode</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lv_obj_scroll.o(.text.lv_obj_set_scrollbar_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lv_obj_set_scrollbar_mode &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
</UL>

<P><STRONG><a name="[313]"></a>lv_obj_set_size</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_set_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = lv_obj_set_size &rArr; lv_obj_set_width &rArr; lv_obj_set_style_width &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
</UL>

<P><STRONG><a name="[2a7]"></a>lv_obj_set_style_align</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lv_obj_set_style_align &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
</UL>

<P><STRONG><a name="[153]"></a>lv_obj_set_style_bg_color</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_bg_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lv_obj_set_style_bg_color &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[152]"></a>lv_obj_set_style_bg_opa</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_bg_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lv_obj_set_style_bg_opa &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[309]"></a>lv_obj_set_style_flex_flow</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_flex.o(.text.lv_obj_set_style_flex_flow))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lv_obj_set_style_flex_flow &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_flow
</UL>

<P><STRONG><a name="[30c]"></a>lv_obj_set_style_flex_grow</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_flex.o(.text.lv_obj_set_style_flex_grow))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lv_obj_set_style_flex_grow &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_grow
</UL>

<P><STRONG><a name="[30e]"></a>lv_obj_set_style_height</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lv_obj_set_style_height &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
</UL>

<P><STRONG><a name="[30a]"></a>lv_obj_set_style_layout</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_layout))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lv_obj_set_style_layout &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_flow
</UL>

<P><STRONG><a name="[156]"></a>lv_obj_set_style_pad_bottom</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lv_obj_set_style_pad_bottom &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[157]"></a>lv_obj_set_style_pad_left</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lv_obj_set_style_pad_left &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[158]"></a>lv_obj_set_style_pad_right</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lv_obj_set_style_pad_right &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[155]"></a>lv_obj_set_style_pad_top</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lv_obj_set_style_pad_top &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[159]"></a>lv_obj_set_style_text_align</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_text_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lv_obj_set_style_text_align &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[154]"></a>lv_obj_set_style_text_color</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_text_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lv_obj_set_style_text_color &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[316]"></a>lv_obj_set_style_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lv_obj_set_style_width &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
</UL>

<P><STRONG><a name="[317]"></a>lv_obj_set_style_x</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lv_obj_set_style_x &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
</UL>

<P><STRONG><a name="[318]"></a>lv_obj_set_style_y</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
</UL>

<P><STRONG><a name="[129]"></a>lv_obj_set_width</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, lv_obj_pos.o(.text.lv_obj_set_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = lv_obj_set_width &rArr; lv_obj_set_style_width &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_width
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_constructor
</UL>

<P><STRONG><a name="[310]"></a>lv_obj_set_x</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lv_obj_pos.o(.text.lv_obj_set_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = lv_obj_set_x &rArr; lv_obj_set_style_x &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_layout_positioned
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_x
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
</UL>

<P><STRONG><a name="[311]"></a>lv_obj_set_y</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lv_obj_pos.o(.text.lv_obj_set_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = lv_obj_set_y &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_layout_positioned
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_y
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
</UL>

<P><STRONG><a name="[315]"></a>lv_obj_style_get_selector_part</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj_style.o(.text.lv_obj_style_get_selector_part))
<BR><BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[314]"></a>lv_obj_style_get_selector_state</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj_style.o(.text.lv_obj_style_get_selector_state))
<BR><BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[144]"></a>lv_obj_update_layout</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_update_layout))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layout_update_core
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_view_recursive
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_act
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
</UL>

<P><STRONG><a name="[1f7]"></a>lv_palette_darken</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lv_color.o(.text.lv_palette_darken))
<BR><BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grey_filter_cb
</UL>

<P><STRONG><a name="[1f6]"></a>lv_palette_lighten</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lv_color.o(.text.lv_palette_lighten))
<BR><BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grey_filter_cb
</UL>

<P><STRONG><a name="[24f]"></a>lv_palette_main</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_color.o(.text.lv_palette_main))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[124]"></a>lv_port_disp_init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lv_port_disp_template.o(.text.lv_port_disp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lv_port_disp_init &rArr; lv_disp_drv_register &rArr; lv_theme_default_init &rArr; lv_obj_report_style_change &rArr; report_style_change_core &rArr;  report_style_change_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillScreen
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_init
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_draw_buf_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>

<P><STRONG><a name="[1c5]"></a>lv_snprintf</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_printf.o(.text.lv_snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = lv_snprintf &rArr; _vsnprintf &rArr; _ntoa_long_long &rArr; _ntoa_format
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
</UL>

<P><STRONG><a name="[179]"></a>lv_style_get_prop</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lv_style.o(.text.lv_style_get_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_style_get_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_state_compare
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_local_style_prop
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_cb
</UL>

<P><STRONG><a name="[1f5]"></a>lv_style_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_style.o(.text.lv_style_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_style_init &rArr; lv_memset_00 &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_trans_style
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init_reset
</UL>

<P><STRONG><a name="[38e]"></a>lv_style_is_empty</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style.o(.text.lv_style_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
</UL>

<P><STRONG><a name="[2f0]"></a>lv_style_prop_get_default</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, lv_style.o(.text.lv_style_prop_get_default))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>

<P><STRONG><a name="[8d]"></a>lv_style_register_prop</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_style.o(.text.lv_style_register_prop))
<BR>[Address Reference Count : 1]<UL><LI> lv_grid.o(.text.lv_grid_init)
</UL>
<P><STRONG><a name="[322]"></a>lv_style_remove_prop</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, lv_style.o(.text.lv_style_remove_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_style_remove_prop &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
</UL>

<P><STRONG><a name="[303]"></a>lv_style_reset</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lv_style.o(.text.lv_style_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lv_style_reset &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init_reset
</UL>

<P><STRONG><a name="[b0]"></a>lv_style_set_anim_time</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_anim_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_style_set_anim_time &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_theme_default.o(.text.style_init)
</UL>
<P><STRONG><a name="[323]"></a>lv_style_set_arc_color</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_arc_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_style_set_arc_color &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[324]"></a>lv_style_set_arc_rounded</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_arc_rounded))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_style_set_arc_rounded &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[325]"></a>lv_style_set_arc_width</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_arc_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_style_set_arc_width &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[ac]"></a>lv_style_set_bg_color</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_bg_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_style_set_bg_color &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_theme_default.o(.text.style_init)
</UL>
<P><STRONG><a name="[326]"></a>lv_style_set_bg_img_src</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_bg_img_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_style_set_bg_img_src &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[a8]"></a>lv_style_set_bg_opa</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_bg_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_style_set_bg_opa &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_theme_default.o(.text.style_init)
</UL>
<P><STRONG><a name="[b2]"></a>lv_style_set_border_color</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_border_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_style_set_border_color &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_theme_default.o(.text.style_init)
</UL>
<P><STRONG><a name="[327]"></a>lv_style_set_border_post</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_border_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_style_set_border_post &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[328]"></a>lv_style_set_border_side</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_border_side))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_style_set_border_side &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[b1]"></a>lv_style_set_border_width</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_border_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_style_set_border_width &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_theme_default.o(.text.style_init)
</UL>
<P><STRONG><a name="[329]"></a>lv_style_set_clip_corner</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_clip_corner))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_style_set_clip_corner &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[32a]"></a>lv_style_set_color_filter_dsc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_color_filter_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_style_set_color_filter_dsc &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[32b]"></a>lv_style_set_color_filter_opa</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_color_filter_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_style_set_color_filter_opa &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[32c]"></a>lv_style_set_height</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_style_set_height &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_size
</UL>

<P><STRONG><a name="[b4]"></a>lv_style_set_line_color</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_line_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_style_set_line_color &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_theme_default.o(.text.style_init)
</UL>
<P><STRONG><a name="[b3]"></a>lv_style_set_line_width</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_line_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_style_set_line_width &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_theme_default.o(.text.style_init)
</UL>
<P><STRONG><a name="[32d]"></a>lv_style_set_outline_color</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_outline_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_style_set_outline_color &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[32e]"></a>lv_style_set_outline_opa</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_outline_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_style_set_outline_opa &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[32f]"></a>lv_style_set_outline_pad</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_outline_pad))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_style_set_outline_pad &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[330]"></a>lv_style_set_outline_width</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_outline_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_style_set_outline_width &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[334]"></a>lv_style_set_pad_bottom</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_style_set_pad_bottom &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_ver
</UL>

<P><STRONG><a name="[ab]"></a>lv_style_set_pad_column</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_pad_column))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_style_set_pad_column &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_gap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_theme_default.o(.text.style_init)
</UL>
<P><STRONG><a name="[331]"></a>lv_style_set_pad_left</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_style_set_pad_left &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_hor
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_all
</UL>

<P><STRONG><a name="[332]"></a>lv_style_set_pad_right</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_style_set_pad_right &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_hor
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_all
</UL>

<P><STRONG><a name="[336]"></a>lv_style_set_pad_row</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_pad_row))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_style_set_pad_row &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_gap
</UL>

<P><STRONG><a name="[333]"></a>lv_style_set_pad_top</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_style_set_pad_top &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_ver
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_all
</UL>

<P><STRONG><a name="[174]"></a>lv_style_set_prop</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, lv_style.o(.text.lv_style_set_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_start_cb
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_cb
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_width
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_color
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_row
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_column
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_width
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_color
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_color_filter_opa
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_color_filter_dsc
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_width
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_side
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_color
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_arc_width
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_arc_color
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_anim_time
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transition
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transform_width
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transform_height
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_line_space
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_font
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_align
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_width
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_opa
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_ofs_y
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_color
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_width
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_pad
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_opa
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_color
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_height
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_clip_corner
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_post
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_img_src
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_arc_rounded
</UL>

<P><STRONG><a name="[ae]"></a>lv_style_set_radius</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_radius))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_style_set_radius &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_theme_default.o(.text.style_init)
</UL>
<P><STRONG><a name="[339]"></a>lv_style_set_shadow_color</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_shadow_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_style_set_shadow_color &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[33a]"></a>lv_style_set_shadow_ofs_y</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_shadow_ofs_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_style_set_shadow_ofs_y &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[33b]"></a>lv_style_set_shadow_opa</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_shadow_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_style_set_shadow_opa &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[33c]"></a>lv_style_set_shadow_width</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_shadow_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_style_set_shadow_width &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[33f]"></a>lv_style_set_text_align</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_text_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_style_set_text_align &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[ad]"></a>lv_style_set_text_color</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_text_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_style_set_text_color &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_theme_default.o(.text.style_init)
</UL>
<P><STRONG><a name="[340]"></a>lv_style_set_text_font</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_text_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_style_set_text_font &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[341]"></a>lv_style_set_text_line_space</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_text_line_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_style_set_text_line_space &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[342]"></a>lv_style_set_transform_height</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_transform_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_style_set_transform_height &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[343]"></a>lv_style_set_transform_width</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_transform_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_style_set_transform_width &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[344]"></a>lv_style_set_transition</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_transition))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_style_set_transition &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[33e]"></a>lv_style_set_width</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_style_set_width &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_size
</UL>

<P><STRONG><a name="[345]"></a>lv_style_transition_dsc_init</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lv_style.o(.text.lv_style_transition_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = lv_style_transition_dsc_init &rArr; lv_memset_00 &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[347]"></a>lv_tabview_get_content</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_tabview.o(.text.lv_tabview_get_content))
<BR><BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_act
</UL>

<P><STRONG><a name="[348]"></a>lv_tabview_get_tab_btns</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_tabview.o(.text.lv_tabview_get_tab_btns))
<BR><BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_act
</UL>

<P><STRONG><a name="[19a]"></a>lv_tabview_set_act</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lv_tabview.o(.text.lv_tabview_set_act))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = lv_tabview_set_act &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_x
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_get_tab_btns
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_get_content
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_btn_ctrl
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_event
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cont_scroll_end_event_cb
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btns_value_changed_event_cb
</UL>

<P><STRONG><a name="[349]"></a>lv_textarea_add_char</STRONG> (Thumb, 296 bytes, Stack size 104 bytes, lv_textarea.o(.text.lv_textarea_add_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + In Cycle
<LI>Call Chain = lv_textarea_add_char &rArr;  insert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_ins
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_get_text
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_clear_selection
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_handler
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[203]"></a>lv_textarea_add_text</STRONG> (Thumb, 312 bytes, Stack size 96 bytes, lv_textarea.o(.text.lv_textarea_add_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + In Cycle
<LI>Call Chain = lv_textarea_add_text &rArr;  insert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_ins
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_clear_selection
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_handler
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_handler
</UL>

<P><STRONG><a name="[34d]"></a>lv_textarea_clear_selection</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lv_textarea.o(.text.lv_textarea_clear_selection))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lv_textarea_clear_selection &rArr; lv_label_set_text_sel_start &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_sel_start
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_sel_end
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text_selection_start
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text_selection_end
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
</UL>

<P><STRONG><a name="[352]"></a>lv_textarea_cursor_down</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lv_textarea.o(.text.lv_textarea_cursor_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = lv_textarea_cursor_down &rArr; lv_textarea_set_cursor_pos &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[353]"></a>lv_textarea_cursor_left</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_textarea.o(.text.lv_textarea_cursor_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = lv_textarea_cursor_left &rArr; lv_textarea_set_cursor_pos &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[354]"></a>lv_textarea_cursor_right</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_textarea.o(.text.lv_textarea_cursor_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = lv_textarea_cursor_right &rArr; lv_textarea_set_cursor_pos &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[355]"></a>lv_textarea_cursor_up</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, lv_textarea.o(.text.lv_textarea_cursor_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = lv_textarea_cursor_up &rArr; lv_textarea_set_cursor_pos &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[356]"></a>lv_textarea_del_char</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, lv_textarea.o(.text.lv_textarea_del_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = lv_textarea_del_char &rArr; insert_handler &rArr; lv_textarea_add_text &rArr;  insert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_cut
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_clear_selection
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_handler
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char_forward
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[357]"></a>lv_textarea_del_char_forward</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lv_textarea.o(.text.lv_textarea_del_char_forward))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = lv_textarea_del_char_forward &rArr; lv_textarea_del_char &rArr; insert_handler &rArr; lv_textarea_add_text &rArr;  insert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[34a]"></a>lv_textarea_get_text</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_textarea.o(.text.lv_textarea_get_text))
<BR><BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
</UL>

<P><STRONG><a name="[34e]"></a>lv_textarea_set_cursor_pos</STRONG> (Thumb, 276 bytes, Stack size 48 bytes, lv_textarea.o(.text.lv_textarea_set_cursor_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = lv_textarea_set_cursor_pos &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_y
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_x
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_cursor_blink
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char_forward
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_up
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_right
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_left
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_down
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_constructor
</UL>

<P><STRONG><a name="[2b5]"></a>lv_theme_apply</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lv_theme.o(.text.lv_theme_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = lv_theme_apply &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_from_obj
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_theme
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
</UL>

<P><STRONG><a name="[24e]"></a>lv_theme_default_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_theme_default.o(.text.lv_theme_default_get))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
</UL>

<P><STRONG><a name="[250]"></a>lv_theme_default_init</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, lv_theme_default.o(.text.lv_theme_default_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = lv_theme_default_init &rArr; lv_obj_report_style_change &rArr; report_style_change_core &rArr;  report_style_change_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_theme
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_report_style_change
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
</UL>

<P><STRONG><a name="[24d]"></a>lv_theme_default_is_inited</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_theme_default.o(.text.lv_theme_default_is_inited))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
</UL>

<P><STRONG><a name="[35a]"></a>lv_theme_get_from_obj</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_theme.o(.text.lv_theme_get_from_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_theme_get_from_obj &rArr; lv_obj_get_disp
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_theme
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_apply
</UL>

<P><STRONG><a name="[14c]"></a>lv_tick_elaps</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_hal_tick.o(.text.lv_tick_elaps))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_tick_elaps
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_handler
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_timer
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_time_remaining
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[143]"></a>lv_tick_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_hal_tick.o(.text.lv_tick_get))
<BR><BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_handler
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_reset_long_press
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_timer
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_ready
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_create
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_constructor
</UL>

<P><STRONG><a name="[362]"></a>lv_tick_inc</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_hal_tick.o(.text.lv_tick_inc))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_tick_task
</UL>

<P><STRONG><a name="[134]"></a>lv_timer_create</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lv_timer.o(.text.lv_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_timer_create &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_anim_core_init
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
</UL>

<P><STRONG><a name="[35c]"></a>lv_timer_del</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lv_timer.o(.text.lv_timer_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lv_timer_del &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_handler
</UL>

<P><STRONG><a name="[15b]"></a>lv_timer_get_idle</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_timer.o(.text.lv_timer_get_idle))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[35d]"></a>lv_timer_handler</STRONG> (Thumb, 328 bytes, Stack size 40 bytes, lv_timer.o(.text.lv_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lv_timer_handler &rArr; lv_timer_del &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_del
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_time_remaining
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_task
</UL>

<P><STRONG><a name="[189]"></a>lv_timer_pause</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_timer.o(.text.lv_timer_pause))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_mark_list_change
</UL>

<P><STRONG><a name="[253]"></a>lv_timer_ready</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_timer.o(.text.lv_timer_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_timer_ready
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
</UL>

<P><STRONG><a name="[16c]"></a>lv_timer_resume</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_timer.o(.text.lv_timer_resume))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_mark_list_change
</UL>

<P><STRONG><a name="[35f]"></a>lv_tlsf_add_pool</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lv_tlsf.o(.text.lv_tlsf_add_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lv_tlsf_add_pool &rArr; block_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_link_next
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_create_with_pool
</UL>

<P><STRONG><a name="[360]"></a>lv_tlsf_create</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, lv_tlsf.o(.text.lv_tlsf_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_tlsf_create
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_create_with_pool
</UL>

<P><STRONG><a name="[29b]"></a>lv_tlsf_create_with_pool</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lv_tlsf.o(.text.lv_tlsf_create_with_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = lv_tlsf_create_with_pool &rArr; lv_tlsf_add_pool &rArr; block_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_create
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_add_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_init
</UL>

<P><STRONG><a name="[29a]"></a>lv_tlsf_free</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lv_tlsf.o(.text.lv_tlsf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_remove
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_next
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_mark_as_free
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_insert
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_absorb
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_realloc
</UL>

<P><STRONG><a name="[29c]"></a>lv_tlsf_get_pool</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_tlsf.o(.text.lv_tlsf_get_pool))
<BR><BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_monitor
</UL>

<P><STRONG><a name="[298]"></a>lv_tlsf_malloc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lv_tlsf.o(.text.lv_tlsf_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_prepare_used
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_locate_free
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_request_size
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_realloc
</UL>

<P><STRONG><a name="[29e]"></a>lv_tlsf_realloc</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, lv_tlsf.o(.text.lv_tlsf_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lv_tlsf_realloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_malloc
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_free
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_split
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_next
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_next
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_mark_as_used
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_insert
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_request_size
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
</UL>

<P><STRONG><a name="[29d]"></a>lv_tlsf_walk_pool</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lv_tlsf.o(.text.lv_tlsf_walk_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_tlsf_walk_pool
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_next
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_monitor
</UL>

<P><STRONG><a name="[68]"></a>lv_trigo_sin</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, lv_math.o(.text.lv_trigo_sin))
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rounded_area
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line_angle_init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_img_buf.o(.text._lv_img_buf_transform_init)
<LI> lv_draw_arc.o(.text.lv_draw_arc_get_area)
</UL>
<P><STRONG><a name="[1c6]"></a>lv_txt_get_size</STRONG> (Thumb, 184 bytes, Stack size 48 bytes, lv_txt.o(.text.lv_txt_get_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_width
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_next_line
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_row_height
</UL>

<P><STRONG><a name="[260]"></a>lv_txt_get_width</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, lv_txt.o(.text.lv_txt_get_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_txt_get_width &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_encoded_letter_next_2
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_is_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_is_char_under_pos
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[183]"></a>lv_vsnprintf</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_printf.o(.text.lv_vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = lv_vsnprintf &rArr; _vsnprintf &rArr; _ntoa_long_long &rArr; _ntoa_format
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_set_text_vfmt
</UL>

<P><STRONG><a name="[f2]"></a>main</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = main &rArr; osKernelStart &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[12d]"></a>osDelay</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cmsis_os2.o(.text.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_tick_task
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_task
</UL>

<P><STRONG><a name="[364]"></a>osKernelInitialize</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, cmsis_os2.o(.text.osKernelInitialize))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[365]"></a>osKernelStart</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, cmsis_os2.o(.text.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = osKernelStart &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[116]"></a>osThreadNew</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, cmsis_os2.o(.text.osThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = osThreadNew &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
</UL>

<P><STRONG><a name="[38b]"></a>pvPortMalloc</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, heap_4.o(.text.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[37e]"></a>pxPortInitialiseStack</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, port.o(.text.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[36b]"></a>uxListRemove</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, list.o(.text.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[391]"></a>vApplicationGetIdleTaskMemory</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cmsis_os2.o(.text.vApplicationGetIdleTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[3a0]"></a>vApplicationGetTimerTaskMemory</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cmsis_os2.o(.text.vApplicationGetTimerTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[a3]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(.text.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text.prvAddNewTaskToReadyList)
</UL>
<P><STRONG><a name="[37d]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(.text.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[36d]"></a>vListInsert</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, list.o(.text.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[36c]"></a>vListInsertEnd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, list.o(.text.vListInsertEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[36f]"></a>vPortEnterCritical</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, port.o(.text.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[370]"></a>vPortExitCritical</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, port.o(.text.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[379]"></a>vPortFree</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, heap_4.o(.text.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[396]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, port.o(.text.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[39e]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, port.o(.text.vPortValidateInterruptPriority))
<BR><BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[373]"></a>vQueueAddToRegistry</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, queue.o(.text.vQueueAddToRegistry))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[386]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, queue.o(.text.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[366]"></a>vTaskDelay</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, tasks.o(.text.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[39b]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(.text.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[38a]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(.text.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[390]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, tasks.o(.text.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[38f]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, tasks.o(.text.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[367]"></a>vTaskStartScheduler</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, tasks.o(.text.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureTimerForRunTimeStats
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetIdleTaskMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[384]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(.text.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[119]"></a>vTaskSwitchContext</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, tasks.o(.text.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRunTimeCounterValue
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[394]"></a>xPortStartScheduler</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, port.o(.text.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xPortStartScheduler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnableVFP
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskExitError
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvPortStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[130]"></a>xPortSysTickHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, port.o(.text.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[372]"></a>xQueueGenericCreateStatic</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, queue.o(.text.xQueueGenericCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[37b]"></a>xQueueGenericReset</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, queue.o(.text.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[39a]"></a>xQueueGenericSend</STRONG> (Thumb, 388 bytes, Stack size 48 bytes, queue.o(.text.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[39d]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, queue.o(.text.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[387]"></a>xQueueReceive</STRONG> (Thumb, 332 bytes, Stack size 48 bytes, queue.o(.text.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[39c]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, tasks.o(.text.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[369]"></a>xTaskCreate</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, tasks.o(.text.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>

<P><STRONG><a name="[368]"></a>xTaskCreateStatic</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, tasks.o(.text.xTaskCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = xTaskCreateStatic &rArr; prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[12f]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(.text.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[382]"></a>xTaskGetTickCount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(.text.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[399]"></a>xTaskIncrementTick</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, tasks.o(.text.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[377]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, tasks.o(.text.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[389]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, tasks.o(.text.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[385]"></a>xTaskResumeAll</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, tasks.o(.text.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[392]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, timers.o(.text.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetTimerTaskMemory
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[383]"></a>xTimerGenericCommand</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, timers.o(.text.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[ec]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[3d5]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[3d6]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[125]"></a>lv_scr_act</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, freertos.o(.text.lv_scr_act))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_scr_act &rArr; lv_disp_get_scr_act
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>

<P><STRONG><a name="[60]"></a>lvgl_task</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, freertos.o(.text.lvgl_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + In Cycle
<LI>Call Chain = lvgl_task &rArr;  lvgl_task (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_handler
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_task
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.text.StartDefaultTask)
</UL>
<P><STRONG><a name="[5f]"></a>lvgl_tick_task</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, freertos.o(.text.lvgl_tick_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + In Cycle
<LI>Call Chain = lvgl_tick_task &rArr;  lvgl_tick_task (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_inc
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_tick_task
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_tick_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.text.StartDefaultTask)
</UL>
<P><STRONG><a name="[10b]"></a>__NVIC_SetPriority</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[114]"></a>SPI_EndRxTxTransaction</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(.text.SPI_EndRxTxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>

<P><STRONG><a name="[11a]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, stm32f4xx_hal_spi.o(.text.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>

<P><STRONG><a name="[5d]"></a>ST7735_ExecuteCommandList</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, st7735.o(.text.ST7735_ExecuteCommandList))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ST7735_ExecuteCommandList &rArr; ST7735_WriteData &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_WriteData
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_WriteCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7735.o(.text.ST7735_Init)
</UL>
<P><STRONG><a name="[5e]"></a>ST7735_WriteCommand</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, st7735.o(.text.ST7735_WriteCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ST7735_WriteCommand &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_ExecuteCommandList
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7735.o(.text.ST7735_SetAddressWindow)
</UL>
<P><STRONG><a name="[1cb]"></a>event_send_core</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, lv_event.o(.text.event_send_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send_core
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send_core
</UL>

<P><STRONG><a name="[1d7]"></a>focus_next_core</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, lv_group.o(.text.focus_next_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = focus_next_core &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_state
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_indev
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_prev
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
</UL>

<P><STRONG><a name="[1d9]"></a>get_indev</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, lv_group.o(.text.get_indev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_indev
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
</UL>

<P><STRONG><a name="[277]"></a>lv_group_refocus</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lv_group.o(.text.lv_group_refocus))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = lv_group_refocus &rArr; lv_group_focus_prev &rArr; focus_next_core &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_prev
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
</UL>

<P><STRONG><a name="[ce]"></a>lv_obj_constructor</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, lv_obj.o(.text.lv_obj_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lv_obj_constructor &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj.o(.rodata.lv_obj_class)
</UL>
<P><STRONG><a name="[cf]"></a>lv_obj_destructor</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, lv_obj.o(.text.lv_obj_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = lv_obj_destructor &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_event_mark_deleted
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_enable_style_refresh
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj.o(.rodata.lv_obj_class)
</UL>
<P><STRONG><a name="[d0]"></a>lv_obj_event</STRONG> (Thumb, 1848 bytes, Stack size 168 bytes, lv_obj.o(.text.lv_obj_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 1252 + Unknown Stack Size
<LI>Call Chain = lv_obj_event &rArr; lv_draw_rect &rArr; lv_draw_img &rArr; show_error &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_indev
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_editable
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_state
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_scroll_obj
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_dir
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_y
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_x
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_view_recursive
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_mode
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_state
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_custom
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_free_param
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_width
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_height
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_radius
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_layout
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_clip_corner
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_post
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_opa
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_align
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj.o(.rodata.lv_obj_class)
</UL>
<P><STRONG><a name="[2be]"></a>lv_obj_get_style_align</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_obj.o(.text.lv_obj_get_style_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_align &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[2c4]"></a>lv_obj_get_style_bg_opa</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj.o(.text.lv_obj_get_style_bg_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_bg_opa &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[2c5]"></a>lv_obj_get_style_border_post</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_obj.o(.text.lv_obj_get_style_border_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_border_post &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[2bc]"></a>lv_obj_get_style_clip_corner</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_obj.o(.text.lv_obj_get_style_clip_corner))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_clip_corner &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[2bf]"></a>lv_obj_get_style_layout</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_obj.o(.text.lv_obj_get_style_layout))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_layout &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[2ca]"></a>lv_obj_get_style_opa</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj.o(.text.lv_obj_get_style_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_opa &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[2c8]"></a>lv_obj_get_style_radius</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj.o(.text.lv_obj_get_style_radius))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_radius &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[2c7]"></a>lv_obj_get_style_transform_height</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_obj.o(.text.lv_obj_get_style_transform_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_transform_height &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[2c6]"></a>lv_obj_get_style_transform_width</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_obj.o(.text.lv_obj_get_style_transform_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_transform_width &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[2a4]"></a>lv_obj_set_state</STRONG> (Thumb, 508 bytes, Stack size 80 bytes, lv_obj.o(.text.lv_obj_set_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_state &rArr; _lv_obj_style_create_transition &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_style_get_selector_state
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_style_get_selector_part
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_state_compare
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_state
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_state
</UL>

<P><STRONG><a name="[2b6]"></a>lv_obj_construct</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lv_obj_class.o(.text.lv_obj_construct))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = lv_obj_construct &rArr;  lv_obj_construct (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_construct
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_construct
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
</UL>

<P><STRONG><a name="[2df]"></a>lv_obj_get_style_blend_mode</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj_draw.o(.text.lv_obj_get_style_blend_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_blend_mode &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_arc_dsc
</UL>

<P><STRONG><a name="[2e4]"></a>lv_obj_get_style_opa</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_draw.o(.text.lv_obj_get_style_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_opa &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_arc_dsc
</UL>

<P><STRONG><a name="[2b2]"></a>lv_obj_get_style_outline_opa</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_draw.o(.text.lv_obj_get_style_outline_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_outline_opa &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
</UL>

<P><STRONG><a name="[2b3]"></a>lv_obj_get_style_outline_pad</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_draw.o(.text.lv_obj_get_style_outline_pad))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_outline_pad &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
</UL>

<P><STRONG><a name="[2b1]"></a>lv_obj_get_style_outline_width</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_draw.o(.text.lv_obj_get_style_outline_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_outline_width &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
</UL>

<P><STRONG><a name="[2af]"></a>lv_obj_get_style_shadow_ofs_x</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_draw.o(.text.lv_obj_get_style_shadow_ofs_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_shadow_ofs_x &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
</UL>

<P><STRONG><a name="[2b0]"></a>lv_obj_get_style_shadow_ofs_y</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_draw.o(.text.lv_obj_get_style_shadow_ofs_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_shadow_ofs_y &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
</UL>

<P><STRONG><a name="[2ad]"></a>lv_obj_get_style_shadow_opa</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_draw.o(.text.lv_obj_get_style_shadow_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_shadow_opa &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
</UL>

<P><STRONG><a name="[2ae]"></a>lv_obj_get_style_shadow_spread</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_draw.o(.text.lv_obj_get_style_shadow_spread))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_shadow_spread &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
</UL>

<P><STRONG><a name="[2ac]"></a>lv_obj_get_style_shadow_width</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_draw.o(.text.lv_obj_get_style_shadow_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_shadow_width &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
</UL>

<P><STRONG><a name="[2f1]"></a>lv_obj_get_style_text_color_filtered</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_obj_draw.o(.text.lv_obj_get_style_text_color_filtered))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lv_obj_get_style_text_color_filtered &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
</UL>

<P><STRONG><a name="[2f2]"></a>lv_obj_get_style_text_font</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_obj_draw.o(.text.lv_obj_get_style_text_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lv_obj_get_style_text_font &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
</UL>

<P><STRONG><a name="[19b]"></a>calc_auto_size</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, lv_obj_pos.o(.text.calc_auto_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = calc_auto_size &rArr; lv_obj_get_scroll_left &rArr; lv_obj_get_self_width &rArr; lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
</UL>

<P><STRONG><a name="[20d]"></a>layout_update_core</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.layout_update_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + In Cycle
<LI>Call Chain = layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_layout
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layout_update_core
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layout_update_core
</UL>

<P><STRONG><a name="[2dc]"></a>lv_obj_get_style_base_dir</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.lv_obj_get_style_base_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_base_dir &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
</UL>

<P><STRONG><a name="[2cd]"></a>lv_obj_get_style_border_width</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.lv_obj_get_style_border_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_border_width &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
</UL>

<P><STRONG><a name="[2e1]"></a>lv_obj_get_style_height</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.lv_obj_get_style_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_height &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
</UL>

<P><STRONG><a name="[20f]"></a>lv_obj_get_style_layout</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.lv_obj_get_style_layout))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_layout &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_layout_positioned
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layout_update_core
</UL>

<P><STRONG><a name="[2d1]"></a>lv_obj_get_style_pad_bottom</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.lv_obj_get_style_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_pad_bottom &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
</UL>

<P><STRONG><a name="[2ce]"></a>lv_obj_get_style_pad_left</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.lv_obj_get_style_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_pad_left &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
</UL>

<P><STRONG><a name="[2cf]"></a>lv_obj_get_style_pad_right</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.lv_obj_get_style_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
</UL>

<P><STRONG><a name="[2d0]"></a>lv_obj_get_style_pad_top</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.lv_obj_get_style_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
</UL>

<P><STRONG><a name="[2fa]"></a>lv_obj_get_style_width</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.lv_obj_get_style_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_width &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
</UL>

<P><STRONG><a name="[2d7]"></a>lv_obj_get_style_base_dir</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_scroll.o(.text.lv_obj_get_style_base_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_base_dir &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_x
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_readjust_scroll
</UL>

<P><STRONG><a name="[2d5]"></a>lv_obj_get_style_border_width</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_obj_scroll.o(.text.lv_obj_get_style_border_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_border_width &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
</UL>

<P><STRONG><a name="[2d4]"></a>lv_obj_get_style_pad_bottom</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_obj_scroll.o(.text.lv_obj_get_style_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_pad_bottom &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
</UL>

<P><STRONG><a name="[2d9]"></a>lv_obj_get_style_pad_left</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_obj_scroll.o(.text.lv_obj_get_style_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_pad_left &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
</UL>

<P><STRONG><a name="[2d8]"></a>lv_obj_get_style_pad_right</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_scroll.o(.text.lv_obj_get_style_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
</UL>

<P><STRONG><a name="[2d3]"></a>lv_obj_get_style_pad_top</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_scroll.o(.text.lv_obj_get_style_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
</UL>

<P><STRONG><a name="[97]"></a>scroll_anim_ready_cb</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.scroll_anim_ready_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = scroll_anim_ready_cb &rArr; lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj_scroll.o(.text.lv_obj_scroll_by)
</UL>
<P><STRONG><a name="[307]"></a>scroll_area_into_view</STRONG> (Thumb, 728 bytes, Stack size 72 bytes, lv_obj_scroll.o(.text.scroll_area_into_view))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = scroll_area_into_view &rArr; lv_obj_scroll_by &rArr; scroll_by_raw &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_view_recursive
</UL>

<P><STRONG><a name="[306]"></a>scroll_by_raw</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lv_obj_scroll.o(.text.scroll_by_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = scroll_by_raw &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_y_anim
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_x_anim
</UL>

<P><STRONG><a name="[95]"></a>scroll_x_anim</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.scroll_x_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = scroll_x_anim &rArr; scroll_by_raw &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_by_raw
</UL>
<BR>[Address Reference Count : 3]<UL><LI> lv_obj_scroll.o(.text.lv_obj_get_scroll_end)
<LI> lv_obj_scroll.o(.text.lv_obj_scroll_to_x)
<LI> lv_obj_scroll.o(.text.scroll_area_into_view)
</UL>
<P><STRONG><a name="[96]"></a>scroll_y_anim</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.scroll_y_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = scroll_y_anim &rArr; scroll_by_raw &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_by_raw
</UL>
<BR>[Address Reference Count : 3]<UL><LI> lv_obj_scroll.o(.text.lv_obj_get_scroll_end)
<LI> lv_obj_scroll.o(.text.lv_obj_scroll_to_y)
<LI> lv_obj_scroll.o(.text.scroll_area_into_view)
</UL>
<P><STRONG><a name="[173]"></a>get_trans_style</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, lv_obj_style.o(.text.get_trans_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = get_trans_style &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_init
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_start_cb
</UL>

<P><STRONG><a name="[302]"></a>refresh_children_style</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lv_obj_style.o(.text.refresh_children_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + In Cycle
<LI>Call Chain = refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
</UL>

<P><STRONG><a name="[305]"></a>report_style_change_core</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, lv_obj_style.o(.text.report_style_change_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + In Cycle
<LI>Call Chain = report_style_change_core &rArr;  report_style_change_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_style_change_core
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_report_style_change
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_style_change_core
</UL>

<P><STRONG><a name="[6f]"></a>trans_anim_cb</STRONG> (Thumb, 324 bytes, Stack size 32 bytes, lv_obj_style.o(.text.trans_anim_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = trans_anim_cb &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_get_prop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj_style.o(.text._lv_obj_style_create_transition)
</UL>
<P><STRONG><a name="[6d]"></a>trans_anim_ready_cb</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, lv_obj_style.o(.text.trans_anim_ready_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = trans_anim_ready_cb &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_is_empty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj_style.o(.text._lv_obj_style_create_transition)
</UL>
<P><STRONG><a name="[6e]"></a>trans_anim_start_cb</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lv_obj_style.o(.text.trans_anim_start_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = trans_anim_start_cb &rArr; trans_del &rArr; lv_style_remove_prop &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_trans_style
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj_style.o(.text._lv_obj_style_create_transition)
</UL>
<P><STRONG><a name="[2a5]"></a>trans_del</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, lv_obj_style.o(.text.trans_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = trans_del &rArr; lv_style_remove_prop &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_style
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_start_cb
</UL>

<P><STRONG><a name="[14a]"></a>draw_buf_flush</STRONG> (Thumb, 964 bytes, Stack size 112 bytes, lv_refr.o(.text.draw_buf_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = draw_buf_flush &rArr; lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_draw_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
</UL>

<P><STRONG><a name="[149]"></a>lv_refr_area_part</STRONG> (Thumb, 296 bytes, Stack size 96 bytes, lv_refr.o(.text.lv_refr_area_part))
<BR><BR>[Stack]<UL><LI>Max Depth = 1180 + Unknown Stack Size
<LI>Call Chain = lv_refr_area_part &rArr; lv_draw_rect &rArr; lv_draw_img &rArr; show_error &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_top
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_sys
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img_dsc_init
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_draw_buf
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj_and_children
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_buf_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[319]"></a>lv_refr_get_top_obj</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, lv_refr.o(.text.lv_refr_get_top_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + In Cycle
<LI>Call Chain = lv_refr_get_top_obj &rArr;  lv_refr_get_top_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
</UL>

<P><STRONG><a name="[31a]"></a>lv_refr_obj</STRONG> (Thumb, 292 bytes, Stack size 80 bytes, lv_refr.o(.text.lv_refr_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + In Cycle
<LI>Call Chain = lv_refr_obj &rArr;  lv_refr_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_ext_draw_size
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj_and_children
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
</UL>

<P><STRONG><a name="[9a]"></a>lv_refr_obj_and_children</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, lv_refr.o(.text.lv_refr_obj_and_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = lv_refr_obj_and_children &rArr; lv_refr_obj &rArr;  lv_refr_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_refr.o(.text.lv_refr_area_part)
</UL>
<P><STRONG><a name="[18a]"></a>apply_theme</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lv_theme.o(.text.apply_theme))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = apply_theme &rArr;  apply_theme (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_theme
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_apply
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_theme
</UL>

<P><STRONG><a name="[1ef]"></a>get_rounded_area</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, lv_draw_arc.o(.text.get_rounded_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_rounded_area
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_trigo_sin
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc
</UL>

<P><STRONG><a name="[62]"></a>color_blend_true_color_additive</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lv_draw_blend.o(.text.color_blend_true_color_additive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = color_blend_true_color_additive &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_blend.o(.text._lv_blend_map)
</UL>
<P><STRONG><a name="[63]"></a>color_blend_true_color_subtractive</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lv_draw_blend.o(.text.color_blend_true_color_subtractive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = color_blend_true_color_subtractive &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_blend.o(.text._lv_blend_map)
</UL>
<P><STRONG><a name="[13f]"></a>lv_color_mix</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lv_draw_blend.o(.text.lv_color_mix))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_map
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_blend_true_color_subtractive
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_blend_true_color_additive
</UL>

<P><STRONG><a name="[25c]"></a>lv_draw_map</STRONG> (Thumb, 1424 bytes, Stack size 232 bytes, lv_draw_img.o(.text.lv_draw_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 396 + Unknown Stack Size
<LI>Call Chain = lv_draw_map &rArr; _lv_blend_map &rArr; _lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_draw_buf
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_map
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_ff
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_is_any
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform_init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
</UL>

<P><STRONG><a name="[25d]"></a>show_error</STRONG> (Thumb, 64 bytes, Stack size 112 bytes, lv_draw_img.o(.text.show_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 780 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = show_error &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
</UL>

<P><STRONG><a name="[84]"></a>hex_char_to_num</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, lv_draw_label.o(.text.hex_char_to_num))
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_label.o(.text.lv_draw_label)
</UL>
<P><STRONG><a name="[86]"></a>lv_draw_mask_angle</STRONG> (Thumb, 636 bytes, Stack size 40 bytes, lv_draw_mask.o(.text.lv_draw_mask_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = lv_draw_mask_angle &rArr; lv_draw_mask_line &rArr; lv_memset_00 &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_mask.o(.text.lv_draw_mask_angle_init)
</UL>
<P><STRONG><a name="[87]"></a>lv_draw_mask_line</STRONG> (Thumb, 1010 bytes, Stack size 40 bytes, lv_draw_mask.o(.text.lv_draw_mask_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = lv_draw_mask_line &rArr; lv_memset_00 &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mask_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_angle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_mask.o(.text.lv_draw_mask_line_points_init)
</UL>
<P><STRONG><a name="[88]"></a>lv_draw_mask_radius</STRONG> (Thumb, 580 bytes, Stack size 56 bytes, lv_draw_mask.o(.text.lv_draw_mask_radius))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = lv_draw_mask_radius &rArr; lv_memset_00 &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mask_mix
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_mask.o(.text.lv_draw_mask_radius_init)
</UL>
<P><STRONG><a name="[267]"></a>mask_mix</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lv_draw_mask.o(.text.mask_mix))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line
</UL>

<P><STRONG><a name="[26c]"></a>grad_get</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, lv_draw_rect.o(.text.grad_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = grad_get
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[26a]"></a>shadow_blur_corner</STRONG> (Thumb, 384 bytes, Stack size 72 bytes, lv_draw_rect.o(.text.shadow_blur_corner))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = shadow_blur_corner &rArr; lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[161]"></a>lv_color_mix</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lv_img_buf.o(.text.lv_color_mix))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform_anti_alias
</UL>

<P><STRONG><a name="[65]"></a>lv_memcpy_small</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_img_buf.o(.text.lv_memcpy_small))
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy_small
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_buf_get_px_color
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy_small
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img_buf.o(.text._lv_img_buf_transform_anti_alias)
</UL>
<P><STRONG><a name="[166]"></a>lv_img_cache_match</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lv_img_cache.o(.text.lv_img_cache_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_img_cache_match &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_invalidate_src
</UL>

<P><STRONG><a name="[282]"></a>lv_color_make</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_img_decoder.o(.text.lv_color_make))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
</UL>

<P><STRONG><a name="[1a0]"></a>children_repos</STRONG> (Thumb, 940 bytes, Stack size 104 bytes, lv_flex.o(.text.children_repos))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = children_repos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;place_content
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_flex_grow
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_item
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
</UL>

<P><STRONG><a name="[1cf]"></a>find_track_end</STRONG> (Thumb, 616 bytes, Stack size 56 bytes, lv_flex.o(.text.find_track_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = find_track_end &rArr; lv_obj_get_style_width &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_height
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_flex_grow
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_item
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
</UL>

<P><STRONG><a name="[89]"></a>flex_update</STRONG> (Thumb, 756 bytes, Stack size 120 bytes, lv_flex.o(.text.flex_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = flex_update &rArr; lv_obj_refr_size &rArr; lv_obj_scroll_to &rArr; lv_obj_scroll_to_y &rArr; lv_obj_scroll_by &rArr; scroll_by_raw &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;place_content
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_row
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_column
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_height
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_flex.o(.text.lv_flex_init)
</UL>
<P><STRONG><a name="[1a9]"></a>get_next_item</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lv_flex.o(.text.get_next_item))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
</UL>

<P><STRONG><a name="[75]"></a>lv_area_get_height</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_flex.o(.text.lv_area_get_height))
<BR>[Address Reference Count : 1]<UL><LI> lv_flex.o(.text.children_repos)
</UL>
<P><STRONG><a name="[74]"></a>lv_area_get_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_flex.o(.text.lv_area_get_width))
<BR>[Address Reference Count : 1]<UL><LI> lv_flex.o(.text.children_repos)
</UL>
<P><STRONG><a name="[1a1]"></a>lv_obj_get_style_base_dir</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_flex.o(.text.lv_obj_get_style_base_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_base_dir &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
</UL>

<P><STRONG><a name="[1a6]"></a>lv_obj_get_style_flex_grow</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lv_flex.o(.text.lv_obj_get_style_flex_grow))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_flex_grow &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
</UL>

<P><STRONG><a name="[1d1]"></a>lv_obj_get_style_height</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_flex.o(.text.lv_obj_get_style_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_height &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
</UL>

<P><STRONG><a name="[1d3]"></a>lv_obj_get_style_pad_column</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_flex.o(.text.lv_obj_get_style_pad_column))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_pad_column &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
</UL>

<P><STRONG><a name="[1d2]"></a>lv_obj_get_style_pad_row</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_flex.o(.text.lv_obj_get_style_pad_row))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_pad_row &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
</UL>

<P><STRONG><a name="[1d0]"></a>lv_obj_get_style_width</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_flex.o(.text.lv_obj_get_style_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_width &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
</UL>

<P><STRONG><a name="[1a2]"></a>place_content</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, lv_flex.o(.text.place_content))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = place_content
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
</UL>

<P><STRONG><a name="[1f9]"></a>count_tracks</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_grid.o(.text.count_tracks))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>

<P><STRONG><a name="[1e8]"></a>get_col_dsc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_grid.o(.text.get_col_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = get_col_dsc &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>

<P><STRONG><a name="[1e9]"></a>get_col_pos</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_grid.o(.text.get_col_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = get_col_pos &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>

<P><STRONG><a name="[1ea]"></a>get_col_span</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_grid.o(.text.get_col_span))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = get_col_span &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>

<P><STRONG><a name="[1f0]"></a>get_row_dsc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_grid.o(.text.get_row_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = get_row_dsc &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>

<P><STRONG><a name="[1f2]"></a>get_row_pos</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_grid.o(.text.get_row_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = get_row_pos &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>

<P><STRONG><a name="[1f3]"></a>get_row_span</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lv_grid.o(.text.get_row_span))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = get_row_span &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>

<P><STRONG><a name="[200]"></a>grid_align</STRONG> (Thumb, 272 bytes, Stack size 28 bytes, lv_grid.o(.text.grid_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = grid_align
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>

<P><STRONG><a name="[8c]"></a>grid_update</STRONG> (Thumb, 1860 bytes, Stack size 128 bytes, lv_grid.o(.text.grid_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = grid_update &rArr; lv_obj_refr_size &rArr; lv_obj_scroll_to &rArr; lv_obj_scroll_to_y &rArr; lv_obj_scroll_by &rArr; scroll_by_raw &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set_height
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_row
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_column
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_height
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_align
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_row_span
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_row_pos
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_row_dsc
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_col_span
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_col_pos
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_col_dsc
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_tracks
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set_width
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_grid.o(.text.lv_grid_init)
</UL>
<P><STRONG><a name="[1fd]"></a>lv_obj_get_style_base_dir</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_grid.o(.text.lv_obj_get_style_base_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_base_dir &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>

<P><STRONG><a name="[1ff]"></a>lv_obj_get_style_height</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_grid.o(.text.lv_obj_get_style_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_height &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>

<P><STRONG><a name="[1fc]"></a>lv_obj_get_style_pad_column</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_grid.o(.text.lv_obj_get_style_pad_column))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_pad_column &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>

<P><STRONG><a name="[1fb]"></a>lv_obj_get_style_pad_row</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_grid.o(.text.lv_obj_get_style_pad_row))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_pad_row &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>

<P><STRONG><a name="[1fe]"></a>lv_obj_get_style_width</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_grid.o(.text.lv_obj_get_style_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_width &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>

<P><STRONG><a name="[a9]"></a>dark_color_filter_cb</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_theme_default.o(.text.dark_color_filter_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dark_color_filter_cb &rArr; lv_color_darken &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_darken
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_theme_default.o(.text.style_init)
</UL>
<P><STRONG><a name="[aa]"></a>grey_filter_cb</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lv_theme_default.o(.text.grey_filter_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = grey_filter_cb &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_lighten
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_darken
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_theme_default.o(.text.style_init)
</UL>
<P><STRONG><a name="[248]"></a>lv_color_hex</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_theme_default.o(.text.lv_color_hex))
<BR><BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_make
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[249]"></a>lv_color_make</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_theme_default.o(.text.lv_color_make))
<BR><BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex
</UL>

<P><STRONG><a name="[1f8]"></a>lv_color_mix</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lv_theme_default.o(.text.lv_color_mix))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grey_filter_cb
</UL>

<P><STRONG><a name="[a7]"></a>lv_disp_dpx</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lv_theme_default.o(.text.lv_disp_dpx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_disp_dpx
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_theme_default.o(.text.style_init)
</UL>
<P><STRONG><a name="[af]"></a>lv_style_set_pad_all</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lv_theme_default.o(.text.lv_style_set_pad_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lv_style_set_pad_all &rArr; lv_style_set_pad_top &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_theme_default.o(.text.style_init)
</UL>
<P><STRONG><a name="[335]"></a>lv_style_set_pad_gap</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_theme_default.o(.text.lv_style_set_pad_gap))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lv_style_set_pad_gap &rArr; lv_style_set_pad_row &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_row
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_column
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[337]"></a>lv_style_set_pad_hor</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_theme_default.o(.text.lv_style_set_pad_hor))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lv_style_set_pad_hor &rArr; lv_style_set_pad_right &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[338]"></a>lv_style_set_pad_ver</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_theme_default.o(.text.lv_style_set_pad_ver))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lv_style_set_pad_ver &rArr; lv_style_set_pad_top &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[33d]"></a>lv_style_set_size</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_theme_default.o(.text.lv_style_set_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lv_style_set_size &rArr; lv_style_set_width &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_width
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_height
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[35b]"></a>style_init</STRONG> (Thumb, 3236 bytes, Stack size 48 bytes, lv_theme_default.o(.text.style_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = style_init &rArr; lv_style_set_size &rArr; lv_style_set_width &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_main
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_color
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_row
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_column
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_width
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_color
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_color_filter_opa
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_color_filter_dsc
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_width
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_side
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_color
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_arc_width
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_arc_color
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_lighten
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_darken
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_transition_dsc_init
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transition
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transform_width
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transform_height
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_line_space
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_font
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_align
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_width
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_opa
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_ofs_y
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_color
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_width
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_pad
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_opa
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_color
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_clip_corner
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_post
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_img_src
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_arc_rounded
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init_reset
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_size
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_ver
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_hor
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_gap
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_all
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_dpx
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[a6]"></a>style_init_reset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_theme_default.o(.text.style_init_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = style_init_reset &rArr; lv_style_reset &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_init
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_theme_default.o(.text.style_init)
</UL>
<P><STRONG><a name="[a1]"></a>theme_apply</STRONG> (Thumb, 1764 bytes, Stack size 24 bytes, lv_theme_default.o(.text.theme_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = theme_apply &rArr; lv_obj_add_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_check_type
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_style
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_theme_default.o(.text.lv_theme_default_init)
</UL>
<P><STRONG><a name="[1b7]"></a>draw_x_ticks</STRONG> (Thumb, 840 bytes, Stack size 232 bytes, lv_chart.o(.text.draw_x_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 900 + Unknown Stack Size
<LI>Call Chain = draw_x_ticks &rArr; lv_draw_label &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line_dsc_init
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_snprintf
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tick_gsc
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_column
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
</UL>

<P><STRONG><a name="[1c8]"></a>draw_y_ticks</STRONG> (Thumb, 728 bytes, Stack size 248 bytes, lv_chart.o(.text.draw_y_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 916 + Unknown Stack Size
<LI>Call Chain = draw_y_ticks &rArr; lv_draw_label &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line_dsc_init
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_snprintf
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tick_gsc
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
</UL>

<P><STRONG><a name="[20b]"></a>invalidate_point</STRONG> (Thumb, 362 bytes, Stack size 48 bytes, lv_chart.o(.text.invalidate_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = invalidate_point &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_column
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
</UL>

<P><STRONG><a name="[c1]"></a>lv_chart_constructor</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, lv_chart.o(.text.lv_chart_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_chart_constructor
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_chart.o(.rodata.lv_chart_class)
</UL>
<P><STRONG><a name="[c2]"></a>lv_chart_destructor</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lv_chart.o(.text.lv_chart_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_chart_destructor &rArr; _lv_ll_clear &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_chart.o(.rodata.lv_chart_class)
</UL>
<P><STRONG><a name="[c3]"></a>lv_chart_event</STRONG> (Thumb, 4408 bytes, Stack size 352 bytes, lv_chart.o(.text.lv_chart_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 1436 + Unknown Stack Size
<LI>Call Chain = lv_chart_event &rArr; lv_draw_rect &rArr; lv_draw_img &rArr; show_error &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_set_ext_draw_size
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_point
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_len
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line_dsc_init
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_get_point_pos_by_id
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_is_empty
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_column
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_height
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_point
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_chart.o(.rodata.lv_chart_class)
</UL>
<P><STRONG><a name="[1ba]"></a>lv_obj_get_style_border_width</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_chart.o(.text.lv_obj_get_style_border_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_border_width &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_get_point_pos_by_id
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_point
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
</UL>

<P><STRONG><a name="[23c]"></a>lv_obj_get_style_height</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_chart.o(.text.lv_obj_get_style_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_height &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
</UL>

<P><STRONG><a name="[1bd]"></a>lv_obj_get_style_pad_bottom</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_chart.o(.text.lv_obj_get_style_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_pad_bottom &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
</UL>

<P><STRONG><a name="[1c2]"></a>lv_obj_get_style_pad_column</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_chart.o(.text.lv_obj_get_style_pad_column))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_pad_column &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_get_point_pos_by_id
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_point
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
</UL>

<P><STRONG><a name="[1b9]"></a>lv_obj_get_style_pad_left</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_chart.o(.text.lv_obj_get_style_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_pad_left &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_get_point_pos_by_id
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_point
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
</UL>

<P><STRONG><a name="[1ca]"></a>lv_obj_get_style_pad_right</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_chart.o(.text.lv_obj_get_style_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
</UL>

<P><STRONG><a name="[1be]"></a>lv_obj_get_style_pad_top</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_chart.o(.text.lv_obj_get_style_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_get_point_pos_by_id
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
</UL>

<P><STRONG><a name="[20c]"></a>lv_obj_get_style_width</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_chart.o(.text.lv_obj_get_style_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_width &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_point
</UL>

<P><STRONG><a name="[9c]"></a>btns_value_changed_event_cb</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lv_tabview.o(.text.btns_value_changed_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = btns_value_changed_event_cb &rArr; lv_tabview_set_act &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_act
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_get_selected_btn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_tabview.o(.text.lv_tabview_constructor)
</UL>
<P><STRONG><a name="[9d]"></a>cont_scroll_end_event_cb</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, lv_tabview.o(.text.cont_scroll_end_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = cont_scroll_end_event_cb &rArr; lv_tabview_set_act &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_end
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_act
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_tabview.o(.text.lv_tabview_constructor)
</UL>
<P><STRONG><a name="[1ac]"></a>lv_obj_get_style_base_dir</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_tabview.o(.text.lv_obj_get_style_base_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_base_dir &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_act
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cont_scroll_end_event_cb
</UL>

<P><STRONG><a name="[d6]"></a>lv_tabview_constructor</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, lv_tabview.o(.text.lv_tabview_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = lv_tabview_constructor &rArr; lv_obj_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_default
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scrollbar_mode
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scroll_snap_x
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_grow
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_flow
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_one_checked
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_tabview.o(.rodata.lv_tabview_class)
</UL>
<P><STRONG><a name="[d7]"></a>lv_tabview_destructor</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lv_tabview.o(.text.lv_tabview_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lv_tabview_destructor &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_tabview.o(.rodata.lv_tabview_class)
</UL>
<P><STRONG><a name="[d8]"></a>lv_tabview_event</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lv_tabview.o(.text.lv_tabview_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = lv_tabview_event &rArr; lv_tabview_set_act &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_act
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_tabview.o(.rodata.lv_tabview_class)
</UL>
<P><STRONG><a name="[1eb]"></a>get_glyph_dsc_id</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, lv_font_fmt_txt.o(.text.get_glyph_dsc_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = get_glyph_dsc_id &rArr; _lv_utils_bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_utils_bsearch
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_dsc_fmt_txt
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_bitmap_fmt_txt
</UL>

<P><STRONG><a name="[8a]"></a>kern_pair_16_compare</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_font_fmt_txt.o(.text.kern_pair_16_compare))
<BR>[Address Reference Count : 1]<UL><LI> lv_font_fmt_txt.o(.text.lv_font_get_glyph_dsc_fmt_txt)
</UL>
<P><STRONG><a name="[8b]"></a>kern_pair_8_compare</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_font_fmt_txt.o(.text.kern_pair_8_compare))
<BR>[Address Reference Count : 1]<UL><LI> lv_font_fmt_txt.o(.text.lv_font_get_glyph_dsc_fmt_txt)
</UL>
<P><STRONG><a name="[79]"></a>unicode_list_compare</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_font_fmt_txt.o(.text.unicode_list_compare))
<BR>[Address Reference Count : 1]<UL><LI> lv_font_fmt_txt.o(.text.get_glyph_dsc_id)
</UL>
<P><STRONG><a name="[251]"></a>lv_obj_remove_style_all</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_hal_disp.o(.text.lv_obj_remove_style_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lv_obj_remove_style_all &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
</UL>

<P><STRONG><a name="[135]"></a>anim_mark_list_change</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lv_anim.o(.text.anim_mark_list_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = anim_mark_list_change
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_resume
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_pause
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_anim_core_init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_timer
</UL>

<P><STRONG><a name="[61]"></a>anim_timer</STRONG> (Thumb, 364 bytes, Stack size 104 bytes, lv_anim.o(.text.anim_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = anim_timer &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_mark_list_change
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_anim.o(.text._lv_anim_core_init)
</UL>
<P><STRONG><a name="[139]"></a>lv_point_within_circle</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lv_area.o(.text.lv_point_within_circle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_point_within_circle
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
</UL>

<P><STRONG><a name="[247]"></a>lv_color_mix</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lv_color.o(.text.lv_color_mix))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_darken
</UL>

<P><STRONG><a name="[94]"></a>lv_mem_walker</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lv_mem.o(.text.lv_mem_walker))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_mem_walker
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_mem.o(.text.lv_mem_monitor)
</UL>
<P><STRONG><a name="[188]"></a>_atoi</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lv_printf.o(.text._atoi))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vsnprintf
</UL>

<P><STRONG><a name="[185]"></a>_ntoa_format</STRONG> (Thumb, 374 bytes, Stack size 48 bytes, lv_printf.o(.text._ntoa_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _ntoa_format
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_long_long
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_long
</UL>

<P><STRONG><a name="[184]"></a>_ntoa_long</STRONG> (Thumb, 150 bytes, Stack size 112 bytes, lv_printf.o(.text._ntoa_long))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _ntoa_long &rArr; _ntoa_format
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_format
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vsnprintf
</UL>

<P><STRONG><a name="[186]"></a>_ntoa_long_long</STRONG> (Thumb, 160 bytes, Stack size 112 bytes, lv_printf.o(.text._ntoa_long_long))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _ntoa_long_long &rArr; _ntoa_format
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_format
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vsnprintf
</UL>

<P><STRONG><a name="[71]"></a>_out_buffer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_printf.o(.text._out_buffer))
<BR>[Address Reference Count : 1]<UL><LI> lv_printf.o(.text._vsnprintf)
</UL>
<P><STRONG><a name="[70]"></a>_out_null</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_printf.o(.text._out_null))
<BR>[Address Reference Count : 1]<UL><LI> lv_printf.o(.text._vsnprintf)
</UL>
<P><STRONG><a name="[187]"></a>_vsnprintf</STRONG> (Thumb, 1168 bytes, Stack size 104 bytes, lv_printf.o(.text._vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = _vsnprintf &rArr; _ntoa_long_long &rArr; _ntoa_format
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_long_long
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_long
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_snprintf
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_vsnprintf
</UL>

<P><STRONG><a name="[35e]"></a>lv_timer_time_remaining</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lv_timer.o(.text.lv_timer_time_remaining))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_timer_time_remaining &rArr; lv_tick_elaps
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_handler
</UL>

<P><STRONG><a name="[361]"></a>adjust_request_size</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lv_tlsf.o(.text.adjust_request_size))
<BR><BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_realloc
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_malloc
</UL>

<P><STRONG><a name="[18b]"></a>block_absorb</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lv_tlsf.o(.text.block_absorb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = block_absorb &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_link_next
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_free
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_next
</UL>

<P><STRONG><a name="[196]"></a>block_insert</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, lv_tlsf.o(.text.block_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = block_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_realloc
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_free
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_add_pool
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_prepare_used
</UL>

<P><STRONG><a name="[18c]"></a>block_link_next</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_tlsf.o(.text.block_link_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_next
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_add_pool
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_prepare_used
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_mark_as_free
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_absorb
</UL>

<P><STRONG><a name="[18e]"></a>block_locate_free</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, lv_tlsf.o(.text.block_locate_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = block_locate_free &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_free_block
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_malloc
</UL>

<P><STRONG><a name="[190]"></a>block_mark_as_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_tlsf.o(.text.block_mark_as_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_link_next
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_free
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_split
</UL>

<P><STRONG><a name="[191]"></a>block_mark_as_used</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_tlsf.o(.text.block_mark_as_used))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = block_mark_as_used
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_next
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_realloc
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_prepare_used
</UL>

<P><STRONG><a name="[192]"></a>block_merge_next</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lv_tlsf.o(.text.block_merge_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_remove
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_next
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_absorb
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_realloc
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_free
</UL>

<P><STRONG><a name="[18d]"></a>block_next</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_tlsf.o(.text.block_next))
<BR><BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_walk_pool
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_realloc
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_next
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_mark_as_used
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_link_next
</UL>

<P><STRONG><a name="[194]"></a>block_prepare_used</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lv_tlsf.o(.text.block_prepare_used))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_split
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_mark_as_used
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_link_next
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_malloc
</UL>

<P><STRONG><a name="[193]"></a>block_remove</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lv_tlsf.o(.text.block_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_free_block
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_free
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_next
</UL>

<P><STRONG><a name="[195]"></a>block_split</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, lv_tlsf.o(.text.block_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_mark_as_free
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_realloc
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_prepare_used
</UL>

<P><STRONG><a name="[a2]"></a>default_walker</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_tlsf.o(.text.default_walker))
<BR>[Address Reference Count : 1]<UL><LI> lv_tlsf.o(.text.lv_tlsf_walk_pool)
</UL>
<P><STRONG><a name="[18f]"></a>remove_free_block</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lv_tlsf.o(.text.remove_free_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = remove_free_block
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_remove
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_locate_free
</UL>

<P><STRONG><a name="[181]"></a>lv_memcpy_small</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_txt.o(.text.lv_memcpy_small))
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy_small
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_ins
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy_small
</UL>

<P><STRONG><a name="[e2]"></a>lv_txt_unicode_to_utf8</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, lv_txt.o(.text.lv_txt_unicode_to_utf8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_txt_unicode_to_utf8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data._lv_txt_unicode_to_encoded)
</UL>
<P><STRONG><a name="[e0]"></a>lv_txt_utf8_get_byte_id</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lv_txt.o(.text.lv_txt_utf8_get_byte_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_txt_utf8_get_byte_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data._lv_txt_encoded_get_byte_id)
</UL>
<P><STRONG><a name="[dc]"></a>lv_txt_utf8_get_char_id</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, lv_txt.o(.text.lv_txt_utf8_get_char_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_txt_utf8_get_char_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data._lv_txt_encoded_get_char_id)
</UL>
<P><STRONG><a name="[e1]"></a>lv_txt_utf8_get_length</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, lv_txt.o(.text.lv_txt_utf8_get_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_txt_utf8_get_length
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data._lv_txt_get_encoded_length)
</UL>
<P><STRONG><a name="[df]"></a>lv_txt_utf8_next</STRONG> (Thumb, 206 bytes, Stack size 20 bytes, lv_txt.o(.text.lv_txt_utf8_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_txt_utf8_next
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[dd]"></a>lv_txt_utf8_prev</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, lv_txt.o(.text.lv_txt_utf8_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_txt_utf8_prev
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data._lv_txt_encoded_prev)
</UL>
<P><STRONG><a name="[de]"></a>lv_txt_utf8_size</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, lv_txt.o(.text.lv_txt_utf8_size))
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[1e2]"></a>get_center</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, lv_arc.o(.text.get_center))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = get_center &rArr; lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_arc_width
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[204]"></a>inv_arc_area</STRONG> (Thumb, 374 bytes, Stack size 72 bytes, lv_arc.o(.text.inv_arc_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = inv_arc_area &rArr; lv_obj_calculate_ext_draw_size &rArr; lv_obj_get_style_shadow_width &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_visible
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc_get_area
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_arc_width
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_start_angle
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_end_angle
</UL>

<P><STRONG><a name="[b8]"></a>lv_arc_constructor</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, lv_arc.o(.text.lv_arc_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = lv_arc_constructor &rArr; lv_obj_clear_flag &rArr; lv_obj_get_scrollbar_area &rArr; lv_obj_get_scroll_left &rArr; lv_obj_get_self_width &rArr; lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_ext_click_area
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_arc.o(.rodata.lv_arc_class)
</UL>
<P><STRONG><a name="[b9]"></a>lv_arc_event</STRONG> (Thumb, 1440 bytes, Stack size 208 bytes, lv_arc.o(.text.lv_arc_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 1660 + Unknown Stack Size
<LI>Call Chain = lv_arc_event &rArr; lv_draw_arc &rArr; lv_draw_rect &rArr; lv_draw_img &rArr; show_error &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_point
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_arc_dsc
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_trigo_sin
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc_dsc_init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_atan2
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_value
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_arc_width
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_center
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_arc.o(.rodata.lv_arc_class)
</UL>
<P><STRONG><a name="[1e7]"></a>lv_obj_get_style_arc_width</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_arc.o(.text.lv_obj_get_style_arc_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_arc_width &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_center
</UL>

<P><STRONG><a name="[1e6]"></a>lv_obj_get_style_pad_bottom</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_arc.o(.text.lv_obj_get_style_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_pad_bottom &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_center
</UL>

<P><STRONG><a name="[1e3]"></a>lv_obj_get_style_pad_left</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_arc.o(.text.lv_obj_get_style_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_pad_left &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_center
</UL>

<P><STRONG><a name="[1e4]"></a>lv_obj_get_style_pad_right</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_arc.o(.text.lv_obj_get_style_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_center
</UL>

<P><STRONG><a name="[1e5]"></a>lv_obj_get_style_pad_top</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_arc.o(.text.lv_obj_get_style_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_center
</UL>

<P><STRONG><a name="[226]"></a>value_update</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, lv_arc.o(.text.value_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = value_update &rArr; lv_arc_set_angles &rArr; lv_arc_set_start_angle &rArr; inv_arc_area &rArr; lv_obj_calculate_ext_draw_size &rArr; lv_obj_get_style_shadow_width &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_start_angle
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_end_angle
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_angles
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_value
</UL>

<P><STRONG><a name="[7d]"></a>lv_area_get_height</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_bar.o(.text.lv_area_get_height))
<BR>[Address Reference Count : 1]<UL><LI> lv_bar.o(.text.lv_bar_event)
</UL>
<P><STRONG><a name="[7c]"></a>lv_area_get_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_bar.o(.text.lv_area_get_width))
<BR>[Address Reference Count : 1]<UL><LI> lv_bar.o(.text.lv_bar_event)
</UL>
<P><STRONG><a name="[7e]"></a>lv_bar_anim</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_bar.o(.text.lv_bar_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_bar_anim &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_bar.o(.text.lv_bar_set_value_with_anim)
</UL>
<P><STRONG><a name="[7f]"></a>lv_bar_anim_ready</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, lv_bar.o(.text.lv_bar_anim_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_bar_anim_ready &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_bar.o(.text.lv_bar_set_value_with_anim)
</UL>
<P><STRONG><a name="[ba]"></a>lv_bar_constructor</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, lv_bar.o(.text.lv_bar_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = lv_bar_constructor &rArr; lv_obj_clear_flag &rArr; lv_obj_get_scrollbar_area &rArr; lv_obj_get_scroll_left &rArr; lv_obj_get_self_width &rArr; lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_bar.o(.rodata.lv_bar_class)
</UL>
<P><STRONG><a name="[bb]"></a>lv_bar_destructor</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lv_bar.o(.text.lv_bar_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lv_bar_destructor &rArr; lv_anim_del &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_bar.o(.rodata.lv_bar_class)
</UL>
<P><STRONG><a name="[bc]"></a>lv_bar_event</STRONG> (Thumb, 1424 bytes, Stack size 288 bytes, lv_bar.o(.text.lv_bar_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 1372 + Unknown Stack Size
<LI>Call Chain = lv_bar_event &rArr; lv_draw_rect &rArr; lv_draw_img &rArr; show_error &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_free_param
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_bar.o(.rodata.lv_bar_class)
</UL>
<P><STRONG><a name="[22d]"></a>lv_bar_set_value_with_anim</STRONG> (Thumb, 112 bytes, Stack size 88 bytes, lv_bar.o(.text.lv_bar_set_value_with_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lv_bar_set_value_with_anim &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_start_value
</UL>

<P><STRONG><a name="[22b]"></a>lv_obj_get_style_pad_bottom</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_bar.o(.text.lv_obj_get_style_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_pad_bottom &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
</UL>

<P><STRONG><a name="[228]"></a>lv_obj_get_style_pad_left</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_bar.o(.text.lv_obj_get_style_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_pad_left &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
</UL>

<P><STRONG><a name="[229]"></a>lv_obj_get_style_pad_right</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_bar.o(.text.lv_obj_get_style_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
</UL>

<P><STRONG><a name="[22a]"></a>lv_obj_get_style_pad_top</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_bar.o(.text.lv_obj_get_style_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
</UL>

<P><STRONG><a name="[bd]"></a>lv_btn_constructor</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_btn.o(.text.lv_btn_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = lv_btn_constructor &rArr; lv_obj_clear_flag &rArr; lv_obj_get_scrollbar_area &rArr; lv_obj_get_scroll_left &rArr; lv_obj_get_self_width &rArr; lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_btn.o(.rodata.lv_btn_class)
</UL>
<P><STRONG><a name="[1da]"></a>get_button_from_point</STRONG> (Thumb, 328 bytes, Stack size 80 bytes, lv_btnmatrix.o(.text.get_button_from_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = get_button_from_point &rArr; lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_row
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_column
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
</UL>

<P><STRONG><a name="[208]"></a>invalidate_button_area</STRONG> (Thumb, 178 bytes, Stack size 56 bytes, lv_btnmatrix.o(.text.invalidate_button_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = invalidate_button_area &rArr; lv_obj_get_style_pad_row &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_row
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_column
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_btn_ctrl
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_clear_btn_ctrl
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
</UL>

<P><STRONG><a name="[be]"></a>lv_btnmatrix_constructor</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lv_btnmatrix.o(.text.lv_btnmatrix_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = lv_btnmatrix_constructor &rArr; lv_btnmatrix_set_map &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_btnmatrix.o(.rodata.lv_btnmatrix_class)
</UL>
<P><STRONG><a name="[bf]"></a>lv_btnmatrix_destructor</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_btnmatrix.o(.text.lv_btnmatrix_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lv_btnmatrix_destructor &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_btnmatrix.o(.rodata.lv_btnmatrix_class)
</UL>
<P><STRONG><a name="[c0]"></a>lv_btnmatrix_event</STRONG> (Thumb, 2072 bytes, Stack size 336 bytes, lv_btnmatrix.o(.text.lv_btnmatrix_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 1420 + Unknown Stack Size
<LI>Call Chain = lv_btnmatrix_event &rArr; lv_draw_rect &rArr; lv_draw_img &rArr; show_error &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_reset_long_press
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_point
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_one_button_checked
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_column
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_button_from_point
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_btnmatrix.o(.rodata.lv_btnmatrix_class)
</UL>
<P><STRONG><a name="[1df]"></a>lv_obj_get_style_pad_bottom</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_btnmatrix.o(.text.lv_obj_get_style_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_pad_bottom &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_button_from_point
</UL>

<P><STRONG><a name="[1e1]"></a>lv_obj_get_style_pad_column</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_btnmatrix.o(.text.lv_obj_get_style_pad_column))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_pad_column &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_button_from_point
</UL>

<P><STRONG><a name="[1dc]"></a>lv_obj_get_style_pad_left</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_btnmatrix.o(.text.lv_obj_get_style_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_pad_left &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_button_from_point
</UL>

<P><STRONG><a name="[1dd]"></a>lv_obj_get_style_pad_right</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_btnmatrix.o(.text.lv_obj_get_style_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_button_from_point
</UL>

<P><STRONG><a name="[1e0]"></a>lv_obj_get_style_pad_row</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_btnmatrix.o(.text.lv_obj_get_style_pad_row))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_pad_row &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_button_from_point
</UL>

<P><STRONG><a name="[1de]"></a>lv_obj_get_style_pad_top</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_btnmatrix.o(.text.lv_obj_get_style_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_button_from_point
</UL>

<P><STRONG><a name="[236]"></a>make_one_button_checked</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lv_btnmatrix.o(.text.make_one_button_checked))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = make_one_button_checked &rArr; lv_btnmatrix_set_btn_ctrl &rArr; lv_btnmatrix_clear_btn_ctrl_all &rArr; lv_btnmatrix_clear_btn_ctrl &rArr; invalidate_button_area &rArr; lv_obj_get_style_pad_row &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_btn_ctrl
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_clear_btn_ctrl_all
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_one_checked
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
</UL>

<P><STRONG><a name="[c4]"></a>lv_checkbox_constructor</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lv_checkbox.o(.text.lv_checkbox_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_checkbox_constructor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_checkbox.o(.rodata.lv_checkbox_class)
</UL>
<P><STRONG><a name="[c5]"></a>lv_checkbox_destructor</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_checkbox.o(.text.lv_checkbox_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lv_checkbox_destructor &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_checkbox.o(.rodata.lv_checkbox_class)
</UL>
<P><STRONG><a name="[c6]"></a>lv_checkbox_event</STRONG> (Thumb, 680 bytes, Stack size 256 bytes, lv_checkbox.o(.text.lv_checkbox_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 1340 + Unknown Stack Size
<LI>Call Chain = lv_checkbox_event &rArr; lv_draw_rect &rArr; lv_draw_img &rArr; show_error &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_letter_space
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_column
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_checkbox.o(.rodata.lv_checkbox_class)
</UL>
<P><STRONG><a name="[246]"></a>lv_obj_get_style_pad_bottom</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_checkbox.o(.text.lv_obj_get_style_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_pad_bottom &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
</UL>

<P><STRONG><a name="[242]"></a>lv_obj_get_style_pad_column</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_checkbox.o(.text.lv_obj_get_style_pad_column))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_pad_column &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
</UL>

<P><STRONG><a name="[243]"></a>lv_obj_get_style_pad_left</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_checkbox.o(.text.lv_obj_get_style_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_pad_left &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
</UL>

<P><STRONG><a name="[244]"></a>lv_obj_get_style_pad_right</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_checkbox.o(.text.lv_obj_get_style_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
</UL>

<P><STRONG><a name="[245]"></a>lv_obj_get_style_pad_top</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_checkbox.o(.text.lv_obj_get_style_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
</UL>

<P><STRONG><a name="[23f]"></a>lv_obj_get_style_text_font</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_checkbox.o(.text.lv_obj_get_style_text_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lv_obj_get_style_text_font &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
</UL>

<P><STRONG><a name="[241]"></a>lv_obj_get_style_text_letter_space</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_checkbox.o(.text.lv_obj_get_style_text_letter_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_text_letter_space &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
</UL>

<P><STRONG><a name="[240]"></a>lv_obj_get_style_text_line_space</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_checkbox.o(.text.lv_obj_get_style_text_line_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_text_line_space &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
</UL>

<P><STRONG><a name="[c9]"></a>lv_label_constructor</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, lv_label.o(.text.lv_label_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = lv_label_constructor &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_label_get_letter_on &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_label.o(.rodata.lv_label_class)
</UL>
<P><STRONG><a name="[ca]"></a>lv_label_destructor</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lv_label.o(.text.lv_label_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lv_label_destructor &rArr; lv_label_dot_tmp_free &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_dot_tmp_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_label.o(.rodata.lv_label_class)
</UL>
<P><STRONG><a name="[286]"></a>lv_label_dot_tmp_free</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lv_label.o(.text.lv_label_dot_tmp_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lv_label_dot_tmp_free &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_revert_dots
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_destructor
</UL>

<P><STRONG><a name="[cb]"></a>lv_label_event</STRONG> (Thumb, 708 bytes, Stack size 96 bytes, lv_label.o(.text.lv_label_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 764 + Unknown Stack Size
<LI>Call Chain = lv_label_event &rArr; lv_draw_label &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_move
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_letter_space
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_revert_dots
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_label.o(.rodata.lv_label_class)
</UL>
<P><STRONG><a name="[288]"></a>lv_label_refr_text</STRONG> (Thumb, 1156 bytes, Stack size 136 bytes, lv_label.o(.text.lv_label_refr_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = lv_label_refr_text &rArr; lv_label_get_letter_on &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_speed_to_time
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_get
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_letter_space
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_anim_speed
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_dot_tmp_free
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_recolor
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
</UL>

<P><STRONG><a name="[287]"></a>lv_label_revert_dots</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lv_label.o(.text.lv_label_revert_dots))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_label_revert_dots &rArr; lv_label_dot_tmp_free &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_dot_tmp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
</UL>

<P><STRONG><a name="[293]"></a>lv_obj_get_style_anim_speed</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_label.o(.text.lv_obj_get_style_anim_speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_obj_get_style_anim_speed &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[289]"></a>lv_obj_get_style_text_font</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_label.o(.text.lv_obj_get_style_text_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_obj_get_style_text_font &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_is_char_under_pos
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
</UL>

<P><STRONG><a name="[28a]"></a>lv_obj_get_style_text_letter_space</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_label.o(.text.lv_obj_get_style_text_letter_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_text_letter_space &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_is_char_under_pos
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
</UL>

<P><STRONG><a name="[28b]"></a>lv_obj_get_style_text_line_space</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_label.o(.text.lv_obj_get_style_text_line_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_text_line_space &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_is_char_under_pos
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
</UL>

<P><STRONG><a name="[28c]"></a>lv_obj_get_style_width</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_label.o(.text.lv_obj_get_style_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_width &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_is_char_under_pos
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
</UL>

<P><STRONG><a name="[92]"></a>set_ofs_x_anim</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_label.o(.text.set_ofs_x_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = set_ofs_x_anim &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_label.o(.text.lv_label_refr_text)
<LI> lv_label.o(.text.lv_label_set_long_mode)
</UL>
<P><STRONG><a name="[93]"></a>set_ofs_y_anim</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_label.o(.text.set_ofs_y_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = set_ofs_y_anim &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_label.o(.text.lv_label_set_long_mode)
</UL>
<P><STRONG><a name="[cc]"></a>lv_line_constructor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lv_line.o(.text.lv_line_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = lv_line_constructor &rArr; lv_obj_clear_flag &rArr; lv_obj_get_scrollbar_area &rArr; lv_obj_get_scroll_left &rArr; lv_obj_get_self_width &rArr; lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_line.o(.rodata.lv_line_class)
</UL>
<P><STRONG><a name="[cd]"></a>lv_line_event</STRONG> (Thumb, 372 bytes, Stack size 72 bytes, lv_line.o(.text.lv_line_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 524 + Unknown Stack Size
<LI>Call Chain = lv_line_event &rArr; lv_draw_line &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line_dsc_init
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_line_width
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_line.o(.rodata.lv_line_class)
</UL>
<P><STRONG><a name="[297]"></a>lv_obj_get_style_line_width</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_line.o(.text.lv_obj_get_style_line_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_line_width &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
</UL>

<P><STRONG><a name="[2dd]"></a>lv_obj_get_style_base_dir</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_slider.o(.text.lv_obj_get_style_base_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_base_dir &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[2e5]"></a>lv_obj_get_style_pad_bottom</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_slider.o(.text.lv_obj_get_style_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_pad_bottom &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_knob
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[2e7]"></a>lv_obj_get_style_pad_left</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_slider.o(.text.lv_obj_get_style_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_pad_left &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_knob
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[2ea]"></a>lv_obj_get_style_pad_right</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_slider.o(.text.lv_obj_get_style_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_knob
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[2ec]"></a>lv_obj_get_style_pad_top</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_slider.o(.text.lv_obj_get_style_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_knob
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[2f8]"></a>lv_obj_get_style_transform_height</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_slider.o(.text.lv_obj_get_style_transform_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_transform_height &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_knob
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[2f9]"></a>lv_obj_get_style_transform_width</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_slider.o(.text.lv_obj_get_style_transform_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_transform_width &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_knob
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[d1]"></a>lv_slider_constructor</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, lv_slider.o(.text.lv_slider_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = lv_slider_constructor &rArr; lv_obj_clear_flag &rArr; lv_obj_get_scrollbar_area &rArr; lv_obj_get_scroll_left &rArr; lv_obj_get_self_width &rArr; lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_ext_click_area
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_slider.o(.rodata.lv_slider_class)
</UL>
<P><STRONG><a name="[d2]"></a>lv_slider_event</STRONG> (Thumb, 1604 bytes, Stack size 224 bytes, lv_slider.o(.text.lv_slider_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 1308 + Unknown Stack Size
<LI>Call Chain = lv_slider_event &rArr; lv_draw_rect &rArr; lv_draw_img &rArr; show_error &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_point
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_get_value
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_get_start_value
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_knob
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_set_value
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_set_left_value
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_get_mode
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_width
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_height
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_slider.o(.rodata.lv_slider_class)
</UL>
<P><STRONG><a name="[31b]"></a>lv_slider_get_mode</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_slider.o(.text.lv_slider_get_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_slider_get_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_get_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[320]"></a>lv_slider_set_left_value</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_slider.o(.text.lv_slider_set_left_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = lv_slider_set_left_value &rArr; lv_bar_set_start_value &rArr; lv_bar_set_value_with_anim &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_start_value
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[31d]"></a>lv_slider_set_value</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_slider.o(.text.lv_slider_set_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = lv_slider_set_value &rArr; lv_bar_set_value &rArr; lv_bar_set_value_with_anim &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[31e]"></a>position_knob</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, lv_slider.o(.text.position_knob))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = position_knob &rArr; lv_obj_get_style_transform_width &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_width
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_height
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[1f1]"></a>get_row_height</STRONG> (Thumb, 240 bytes, Stack size 80 bytes, lv_table.o(.text.get_row_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = get_row_height &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_size
</UL>

<P><STRONG><a name="[2de]"></a>lv_obj_get_style_base_dir</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_table.o(.text.lv_obj_get_style_base_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_base_dir &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
</UL>

<P><STRONG><a name="[2e2]"></a>lv_obj_get_style_max_height</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_table.o(.text.lv_obj_get_style_max_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_max_height &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_size
</UL>

<P><STRONG><a name="[2e3]"></a>lv_obj_get_style_min_height</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_table.o(.text.lv_obj_get_style_min_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_min_height &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_size
</UL>

<P><STRONG><a name="[2e6]"></a>lv_obj_get_style_pad_bottom</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_table.o(.text.lv_obj_get_style_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_pad_bottom &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_size
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
</UL>

<P><STRONG><a name="[2e8]"></a>lv_obj_get_style_pad_left</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_table.o(.text.lv_obj_get_style_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_pad_left &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_size
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
</UL>

<P><STRONG><a name="[2eb]"></a>lv_obj_get_style_pad_right</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_table.o(.text.lv_obj_get_style_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_size
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
</UL>

<P><STRONG><a name="[2ed]"></a>lv_obj_get_style_pad_top</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_table.o(.text.lv_obj_get_style_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_size
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
</UL>

<P><STRONG><a name="[2f3]"></a>lv_obj_get_style_text_font</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_table.o(.text.lv_obj_get_style_text_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lv_obj_get_style_text_font &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_size
</UL>

<P><STRONG><a name="[2f5]"></a>lv_obj_get_style_text_letter_space</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_table.o(.text.lv_obj_get_style_text_letter_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_text_letter_space &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_size
</UL>

<P><STRONG><a name="[2f6]"></a>lv_obj_get_style_text_line_space</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_table.o(.text.lv_obj_get_style_text_line_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_text_line_space &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_size
</UL>

<P><STRONG><a name="[d3]"></a>lv_table_constructor</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lv_table.o(.text.lv_table_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = lv_table_constructor &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_table.o(.rodata.lv_table_class)
</UL>
<P><STRONG><a name="[d4]"></a>lv_table_destructor</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lv_table.o(.text.lv_table_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_table_destructor &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_table.o(.rodata.lv_table_class)
</UL>
<P><STRONG><a name="[d5]"></a>lv_table_event</STRONG> (Thumb, 1796 bytes, Stack size 392 bytes, lv_table.o(.text.lv_table_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 1476 + Unknown Stack Size
<LI>Call Chain = lv_table_event &rArr; lv_draw_rect &rArr; lv_draw_img &rArr; show_error &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_scroll_obj
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_point
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_size
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_table.o(.rodata.lv_table_class)
</UL>
<P><STRONG><a name="[346]"></a>refr_size</STRONG> (Thumb, 164 bytes, Stack size 72 bytes, lv_table.o(.text.refr_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = refr_size &rArr; get_row_height &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_letter_space
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_min_height
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_max_height
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_row_height
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
</UL>

<P><STRONG><a name="[a5]"></a>cursor_blink_anim_cb</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lv_textarea.o(.text.cursor_blink_anim_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = cursor_blink_anim_cb &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_textarea.o(.text.start_cursor_blink)
</UL>
<P><STRONG><a name="[201]"></a>insert_handler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lv_textarea.o(.text.insert_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = insert_handler &rArr; lv_textarea_add_text &rArr;  insert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
</UL>

<P><STRONG><a name="[2e0]"></a>lv_obj_get_style_border_width</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_textarea.o(.text.lv_obj_get_style_border_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_border_width &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[2e9]"></a>lv_obj_get_style_pad_left</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_textarea.o(.text.lv_obj_get_style_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_pad_left &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[2ee]"></a>lv_obj_get_style_pad_top</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_textarea.o(.text.lv_obj_get_style_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[2f4]"></a>lv_obj_get_style_text_font</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_textarea.o(.text.lv_obj_get_style_text_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lv_obj_get_style_text_font &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_up
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_down
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
</UL>

<P><STRONG><a name="[2f7]"></a>lv_obj_get_style_text_line_space</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_textarea.o(.text.lv_obj_get_style_text_line_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_get_style_text_line_space &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_up
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_down
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
</UL>

<P><STRONG><a name="[d9]"></a>lv_textarea_constructor</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, lv_textarea.o(.text.lv_textarea_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = lv_textarea_constructor &rArr; lv_textarea_set_cursor_pos &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_cursor_blink
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_textarea.o(.rodata.lv_textarea_class)
</UL>
<P><STRONG><a name="[da]"></a>lv_textarea_destructor</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lv_textarea.o(.text.lv_textarea_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lv_textarea_destructor &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_textarea.o(.rodata.lv_textarea_class)
</UL>
<P><STRONG><a name="[db]"></a>lv_textarea_event</STRONG> (Thumb, 1180 bytes, Stack size 144 bytes, lv_textarea.o(.text.lv_textarea_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 1228 + Unknown Stack Size
<LI>Call Chain = lv_textarea_event &rArr; lv_draw_rect &rArr; lv_draw_img &rArr; show_error &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_vect
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_point
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_move
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_is_char_under_pos
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char_forward
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_up
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_right
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_left
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_down
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_cursor_blink
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_textarea.o(.rodata.lv_textarea_class)
</UL>
<P><STRONG><a name="[34b]"></a>pwd_char_hider</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, lv_textarea.o(.text.pwd_char_hider))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = pwd_char_hider &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_label_get_letter_on &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_dsc
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider_anim_ready
</UL>

<P><STRONG><a name="[9e]"></a>pwd_char_hider_anim</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_textarea.o(.text.pwd_char_hider_anim))
<BR>[Address Reference Count : 1]<UL><LI> lv_textarea.o(.text.lv_textarea_add_text)
</UL>
<P><STRONG><a name="[a0]"></a>pwd_char_hider_anim_ready</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_textarea.o(.text.pwd_char_hider_anim_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = pwd_char_hider_anim_ready &rArr; pwd_char_hider &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_label_get_letter_on &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_textarea.o(.text.lv_textarea_add_text)
</UL>
<P><STRONG><a name="[359]"></a>refr_cursor_area</STRONG> (Thumb, 472 bytes, Stack size 72 bytes, lv_textarea.o(.text.refr_cursor_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = refr_cursor_area &rArr; lv_label_get_letter_pos &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_style_text_align
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[351]"></a>start_cursor_blink</STRONG> (Thumb, 100 bytes, Stack size 88 bytes, lv_textarea.o(.text.start_cursor_blink))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = start_cursor_blink &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_constructor
</UL>

<P><STRONG><a name="[99]"></a>disp_flush</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, lv_port_disp_template.o(.text.disp_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = disp_flush &rArr; ST7735_DrawPixel &rArr; ST7735_SetAddressWindow &rArr; ST7735_WriteData &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawPixel
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_flush_ready
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_port_disp_template.o(.text.lv_port_disp_init)
</UL>
<P><STRONG><a name="[374]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, queue.o(.text.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[376]"></a>prvCopyDataToQueue</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, queue.o(.text.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[37a]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, queue.o(.text.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
</UL>

<P><STRONG><a name="[380]"></a>prvIsQueueEmpty</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, queue.o(.text.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[388]"></a>prvUnlockQueue</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, queue.o(.text.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[36a]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, tasks.o(.text.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[36e]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, tasks.o(.text.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddNewTaskToReadyList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[378]"></a>prvDeleteTCB</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, tasks.o(.text.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[b6]"></a>prvIdleTask</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, tasks.o(.text.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvIdleTask &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[37c]"></a>prvInitialiseNewTask</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, tasks.o(.text.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[39f]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tasks.o(.text.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[371]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, timers.o(.text.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[37f]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, timers.o(.text.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[381]"></a>prvSampleTimeNow</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, timers.o(.text.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = prvSampleTimeNow &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[b7]"></a>prvTimerTask</STRONG> (Thumb, 468 bytes, Stack size 24 bytes, timers.o(.text.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = prvTimerTask &rArr; prvSampleTimeNow &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(.text.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[38c]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, heap_4.o(.text.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[398]"></a>prvPortStartFirstTask</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, port.o(.text.prvPortStartFirstTask))
<BR><BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[a4]"></a>prvTaskExitError</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, port.o(.text.prvTaskExitError))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = prvTaskExitError
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[397]"></a>vPortEnableVFP</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, port.o(.text.vPortEnableVFP))
<BR><BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
